{
  "version": 3,
  "file": "op.js",
  "sourceRoot": "..",
  "sources": [
    "src/op.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport * as Error from './error.js';\nimport { NumberLit, ArrayLit, SentinelValue } from './ast.js';\nimport { zip } from './util.js';\n\n# Helper functions for producing operations on the stack\n\n# Takes a binary function and constructs an operation which takes any\n# number of arguments (determined by numerical modifier).\n#\n# - If given zero arguments, opts.zero is returned, and an exception\n#   is thrown if opts.zero is undefined.\n# - If given one argument, opts.one is returned. If opts.one is\n#   undefined, then a single argument is popped and then pushed\n#   unmodified.\n# - If two or more are given, the arguments are folded starting\n#   with the deepest on the stack.\nexport binaryReduce = (fn, term, state, opts = {}) ->\n  adjustment = opts.modifierAdjustment ? (x) -> x\n  mod = adjustment(term.getNumMod(opts.defaultModifier ? 2))\n  if mod == 0\n    if opts.zero?\n      state.push opts.zero()\n    else\n      throw new Error.InvalidModifier(term)\n  else if mod == 1 and opts.one?\n    top = state.pop()\n    state.push opts.one(top)\n  else\n    arr = state.pop(mod)\n    state.push arr.reduce(fn)\n\nexport binaryReduceRight = (fn, term, state, opts = {}) ->\n  adjustment = opts.modifierAdjustment ? (x) -> x\n  mod = adjustment(term.getNumMod(opts.defaultModifier ? 2))\n  if mod == 0\n    if opts.zero?\n      state.push opts.zero()\n    else\n      throw new Error.InvalidModifier(term)\n  else if mod == 1 and opts.one?\n    top = state.pop()\n    state.push opts.one(top)\n  else\n    arr = state.pop(mod)\n    state.push arr.slice().reverse().reduce((x, y) -> fn(y, x))\n\n# Takes a binary function and constructs an operation which takes any\n# number of arguments (determined by numerical modifier).\n#\n# - If given zero arguments, opts.zero is returned, and an exception\n#   is thrown if opts.zero is undefined.\n# - If given one argument, opts.one is returned. If opts.one is\n#   undefined, then an exception is thrown.\n# - If two or more are given, every adjacent pair is compared\n#   using the binary function, and the results are reduced.\nexport mergeReduce = (fn, reduce, term, state, opts = {}) ->\n  adjustment = opts.modifierAdjustment ? (x) -> x\n  mod = adjustment(term.getNumMod(opts.defaultModifier ? 2))\n  if mod == 0\n    if opts.zero?\n      state.push opts.zero\n    else\n      throw new Error.InvalidModifier(term)\n  else if mod == 1\n    if opts.one?\n      top = state.pop()\n      state.push opts.one(top)\n    else\n      throw new Error.InvalidModifier(term)\n  else\n    arr = state.pop(mod)\n    brr = (fn(arr[i], arr[i + 1]) for i in [0..arr.length-2])\n    state.push brr.reduce(reduce)\n\nexport scalarExtend = (f) ->\n  f1 = (x, y) ->\n    if x instanceof ArrayLit or y instanceof ArrayLit\n      unless x instanceof ArrayLit\n        x = ArrayLit.filled(y.length, x)\n      unless y instanceof ArrayLit\n        y = ArrayLit.filled(x.length, y)\n      if x.length != y.length\n        throw new Error.IncompatibleArrayLengths()\n      new ArrayLit(f1(...curr) for curr in zip(x.data, y.data))\n    else\n      f(x, y)\n  f1\n\nexport scalarExtendUnary = (f) ->\n  f1 = (x) ->\n    if x instanceof ArrayLit\n      new ArrayLit(f1(curr) for curr in x.data)\n    else\n      f(x)\n  f1\n\nexport handleWhiteFlag = (state, term, default_, f) ->\n  mod = term.getNumMod(2)\n  if mod > 0\n    top = state.peek()\n    if top instanceof SentinelValue and top.type.toString() == '⚐'\n      state.pop() # Pop the sentinel\n      if typeof default_ == 'function'\n        state.push(default_())\n      else\n        state.push(default_)\n      return\n  f()\n\nexport noExtension = (fn, term, state, opts = {}) ->\n  [a, b] = state.pop(2)\n  state.push fn(a, b)\n\nexport binary = (fn, term, state, opts = {}) ->\n  zero = opts.zero\n  one = opts.one\n  zero = (() -> opts.zero) if zero? and typeof zero != 'function'\n  one = ((_) -> opts.one) if one? and typeof one != 'function'\n  one = scalarExtendUnary(one) if opts.scalarExtend and one?\n  binaryReduce fn, term, state,\n    zero: zero\n    one: one\n    modifierAdjustment: opts.modifierAdjustment\n    defaultModifier: opts.defaultModifier\n\n# binary but associate to the right\nexport binaryRight = (fn, term, state, opts = {}) ->\n  zero = opts.zero\n  one = opts.one\n  zero = (() -> opts.zero) if zero? and typeof zero != 'function'\n  one = ((_) -> opts.one) if one? and typeof one != 'function'\n  one = scalarExtendUnary(one) if opts.scalarExtend and one?\n  binaryReduceRight fn, term, state,\n    zero: zero\n    one: one\n    modifierAdjustment: opts.modifierAdjustment\n    defaultModifier: opts.defaultModifier\n\nexport merge = (reduce) -> (fn, term, state, opts = {}) ->\n  if opts.scalarExtend\n    reduce = scalarExtend(reduce)\n  zero = opts.zero\n  one = opts.one\n  zero = (() -> opts.zero) if zero? and typeof zero != 'function'\n  one = ((_) -> opts.one) if one? and typeof one != 'function'\n  one = scalarExtendUnary(one) if opts.scalarExtend and one?\n  mergeReduce fn, reduce, term, state,\n    zero: zero\n    one: one\n    modifierAdjustment: opts.modifierAdjustment\n    defaultModifier: opts.defaultModifier\n\nexport WhiteFlag =\n  # Inherit from the zero argument, if provided. If not, behaves like\n  # ignore.\n  inherit: (opts) -> opts.zero\n  # Use a constant value.\n  value: (n) -> (opts) -> n\n  # Perform no special handling.\n  ignore: (opts) -> undefined\n\nexport boolToInt = (x) ->\n  new NumberLit(if x then -1 else 0)\n\n# This function is an attempt to summarize all of the above, providing\n# all of that functionality as keyword arguments. The available\n# keyword arguments are listed below.\n#\n# - function (required) - The function to apply.\n#\n# - postProcess (optional) - Unary function; runs after the original\n#   function. Defaults to the identity function.\n#\n# - preProcess (optional) - Unary function; runs on each argument to\n# - the original function. Generally, this is a type check of some\n# - variety.\n#\n# - extension (optional) - If provided, this should be one of Op.none,\n#   Op.binary, or Op.merge(...). It determines how to reduce the\n#   function along more arguments.\n#\n# - scalarExtend (optional) - Boolean which defaults to false. If\n#   true, the function will extend if at least one of the arguments is\n#   a list.\n#\n# - zero (optional) - If provided, this will be used as the\n#   zero-argument result after extension.\n#\n# - one (optional) - If provided, this will be used as the\n#   one-argument result after extension.\n#\n# - whiteFlag (optional) - How to handle the white flag, usually one\n#   of the WhiteFlag.* constants. Defaults to WhiteFlag.inherit.\n#\n# - modifierAdjustment (optional) - A unary function to apply to the\n#   numerical modifier before interpreting it as arity. Defaults to\n#   the identity function.\n#\n# - defaultModifier (optional) - Default modifier. Defaults to 2.\nexport op = (state, term, opts = {}) ->\n  func = opts.function\n  if opts.postProcess\n    unpostprocessedFunc = func\n    func = (a, b) -> opts.postProcess(unpostprocessedFunc(a, b))\n  if opts.preProcess\n    unpreprocessedFunc = func\n    func = (a, b) -> unpreprocessedFunc(opts.preProcess(a), opts.preProcess(b))\n  if opts.scalarExtend\n    func = scalarExtend(func)\n  operation = -> (opts.extension ? noExtension)(func, term, state, opts)\n  whiteFlag = (opts.whiteFlag ? WhiteFlag.inherit)(opts)\n  if whiteFlag?\n    oldOperation = operation\n    operation = -> handleWhiteFlag state, term, whiteFlag, oldOperation\n  operation()\n"
  ]
}