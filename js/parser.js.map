{
  "version": 3,
  "file": "parser.js",
  "sourceRoot": "..",
  "sources": [
    "src/parser.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport { Token, TokenType, translateEscape } from './token.js'\nimport { SimpleCmd, FunctionLit, AssignToVar, ReadFromVar } from './ast.js'\nimport * as Error from './error.js'\nimport * as Modifier from './modifier.js'\nimport Str from './str.js'\n\n# Takes an Str\nexport tokenize = (str) ->\n  str = Str.fromString(str) if typeof(str) == 'string'\n  arr = []\n  idx = 0\n  len = str.length\n  while idx < len\n    ch = str.charAt idx\n    if /\\s/.test(ch)\n      # Whitespace; skip\n      idx += 1\n    else if ch == \"👿\"\n      arr.push(new Token(NaN))\n      idx += 1\n    else if ch == \"∞\" or (ch == \"-\" and idx < len - 1 and str.charAt(idx + 1) == \"∞\")\n      if ch == \"∞\"\n        arr.push(new Token(Infinity))\n        idx += 1\n      else\n        arr.push(new Token(-Infinity))\n        idx += 2\n    else if /[0-9]/.test(ch) or (ch == \"-\" and idx < len - 1 and /[0-9]/.test(str.charAt(idx + 1)))\n      # Number; parse whole number\n      num = ch\n      idx += 1\n      while idx < len and /[0-9]/.test(str.charAt idx)\n        num += str.charAt idx\n        idx += 1\n      arr.push(new Token(parseInt num, 10))\n    else if ch == '\"'\n      # String literal; parse whole string\n      idx += 1\n      result = \"\"\n      while idx < len and str.charAt(idx) != '\"'\n        if str.charAt(idx) == '\\\\'\n          idx += 1\n          break if idx >= len\n          result += translateEscape(str.charAt(idx))\n        else\n          result += str.charAt(idx)\n        idx += 1\n      throw new Error.UnexpectedEOF() unless idx < len and str.charAt(idx) == '\"'\n      arr.push(new Token(result, true))\n      idx += 1\n    else if ch == '«'\n      # Comment; skip until next matching »\n      nested = 1\n      idx += 1\n      while nested > 0\n        if idx >= len\n          throw new Error.UnexpectedEOF()\n        curr = str.charAt idx\n        if curr == '«'\n          nested += 1\n        else if curr == '»'\n          nested -= 1\n        idx += 1\n    else\n      # Miscellaneous; push single character\n      arr.push(new Token(ch))\n      idx += 1\n  arr\n\nclass Parser\n  constructor: (@tokens, @index) ->\n\n  at: () ->\n    if this.atEnd()\n      undefined\n    else\n      @tokens[@index]\n\n  parseTermNoMod: () ->\n    curr = this.at()\n    return undefined unless curr?\n    if curr.isString\n      @index += 1\n      return new SimpleCmd(curr)\n    switch curr.text.toString()\n      when '['\n        @index += 1\n        inner = this.parse()\n        if not this.at()? or this.at().text.toString() != ']'\n          if this.at()?\n            throw new Error.UnexpectedParseError(this.at())\n          else\n            throw new Error.UnexpectedEOF()\n        @index += 1\n        new FunctionLit(inner)\n      when ']'\n        undefined\n      when '`'\n        @index += 1\n        inner = this.parseTerm()\n        unless inner?\n          if this.at()?\n            throw new Error.UnexpectedParseError(this.at())\n          else\n            throw new Error.UnexpectedEOF()\n        new FunctionLit([inner])\n      when '→'\n        @index += 1\n        inner = this.at()\n        if inner?.tokenType() == TokenType.Command\n          @index += 1\n          new AssignToVar(inner)\n        else if this.at()?\n          throw new Error.UnexpectedParseError(this.at())\n        else\n          throw new Error.UnexpectedEOF()\n      when '←'\n        @index += 1\n        inner = this.at()\n        if inner?.tokenType() == TokenType.Command\n          @index += 1\n          new ReadFromVar(inner)\n        else if this.at()?\n          throw new Error.UnexpectedParseError(this.at())\n        else\n          throw new Error.UnexpectedEOF()\n      else\n        @index += 1\n        new SimpleCmd(curr)\n\n  parseTerm: () ->\n    result = this.parseTermNoMod()\n    return undefined unless result?\n    mod = this.tryParseMod()\n    while mod?\n      result.modifiers.push mod\n      mod = this.tryParseMod()\n    result\n\n  tryParseMod: () ->\n    curr = this.at()\n    return undefined unless curr?\n    num = Modifier.toNumModifier curr\n    if num?\n      @index += 1\n      num\n    else if curr.text.toString() == \"′\"\n      @index += 1\n      new Modifier.PrimeModifier()\n    else\n      undefined\n\n  parse: () ->\n    arr = []\n    while !this.atEnd()\n      next = this.parseTerm()\n      break unless next?\n      arr.push(next)\n    arr\n\n  atEnd: () ->\n    @index >= @tokens.length\n\nexport parse = (tokens) ->\n  parser = new Parser(tokens, 0)\n  result = parser.parse()\n  unless parser.atEnd()\n    throw new Error.UnexpectedParseError(parser.at())\n  result\n"
  ]
}