// Generated by CoffeeScript 2.5.1
var DEBUG_MODE, inputManager;

import {
  tokenize,
  parse
} from './parser.js';

import {
  Evaluator
} from './eval.js';

import {
  Error
} from './error.js';

import {
  FunctionLit
} from './ast.js';

import {
  InputManager
} from './unicode_input.js';

import Str from './str.js';

DEBUG_MODE = false;

inputManager = null;

export var InteractiveEvaluator = class InteractiveEvaluator extends Evaluator {
  constructor() {
    super();
    this.input = Str.fromString(document.querySelector("#input").value);
    this.inputPos = 0;
  }

  print(value) {
    return document.querySelector("#output").innerText += value.toString() + "\n";
  }

  readInput() {
    var result;
    if (this.inputPos >= this.input.length) {
      return void 0;
    } else {
      result = this.input.charAt(this.inputPos);
      this.inputPos += 1;
      return result;
    }
  }

  peekInput() {
    if (this.inputPos >= this.input.length) {
      return void 0;
    } else {
      return this.input.charAt(this.inputPos);
    }
  }

};

export var run = function() {
  var e, evaluator, parsed, text, tokens;
  text = document.querySelector("#code").value;
  evaluator = new InteractiveEvaluator();
  try {
    document.querySelector("#output").innerText = "";
    document.querySelector("#stack").innerText = "";
    tokens = tokenize(text);
    parsed = parse(tokens);
    evaluator.pushCall(new FunctionLit(parsed));
    evaluator.eval(parsed);
    evaluator.popCall();
  } catch (error) {
    e = error;
    if (e instanceof Error && !DEBUG_MODE) {
      document.querySelector("#output").innerText += "\n\n" + e.toString() + "\n";
    } else {
      throw e;
    }
  }
  return document.querySelector("#stack").innerText = evaluator.stackToString();
};

export var initInputMgr = function() {
  inputManager = new InputManager();
  return inputManager.register(document.querySelector("#code"));
};

//# sourceMappingURL=main.js.map
