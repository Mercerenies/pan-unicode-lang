{
  "version": 3,
  "file": "list_op.js",
  "sourceRoot": "..",
  "sources": [
    "src/list_op.coffee"
  ],
  "names": [],
  "mappings": ";AACA,IAAA,mBAAA,EAAA,cAAA,EAAA,aAAA,EAAA,OAAA,EAAA,OAAA,EAAA,SAAA,EAAA,MAAA;EAAA;;AAAA,OAAO,CAAA,SAAP,MAAA;;AACA,OAAA;EAAS,QAAT;EAAmB,WAAnB;EAAgC,SAAhC;EAA2C,SAA3C;EAAsD,aAAtD;EAAqE,OAArE;EAA8E,QAA9E;EAAwF,SAAxF;CAAA,MAAA;;AACA,OAAA;EAAS,WAAT;EAAsB,gBAAtB;CAAA,MAAA;;AACA,OAAO,GAAP,MAAA;;AACA,OAAA;EAAS,QAAT;EAAmB,SAAnB;EAA8B,MAA9B;CAAA,MAAA;;AACA,OAAA;EAAS,MAAT;CAAA,MAAA;;AACA,OAAA;EAAS,KAAT;CAAA,MAAA,aANA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA,OAAA,IAAO,MAAA,GAAS,QAAA,CAAC,IAAD,EAAO,KAAP,CAAA;AAChB,MAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA;EAAE,KAAA,GAAQ,IAAI,CAAC,SAAL,CAAe,CAAf;EACR,IAAoB,KAAA,KAAS,gBAA7B;IAAA,KAAA,GAAQ,MAAR;;EACA,CAAC,IAAD,EAAO,IAAP,CAAA,GAAe,KAAK,CAAC,GAAN,CAAU,CAAV;EACf,MAAA,GAAS,SAAA,CAAU,KAAV,EAAiB,IAAjB,EAAuB,IAAvB,EAA6B,KAA7B;SACT,KAAK,CAAC,IAAN,CAAW,GAAA,MAAX;AALc;;AAOhB,cAAA,GAAiB,QAAA,CAAC,KAAD,EAAQ,IAAR,EAAc,KAAd,CAAA;AACjB,MAAA;EAAE,IAAG,IAAA,YAAgB,SAAnB;IACE,KAAkD,MAAM,CAAC,SAAP,CAAiB,IAAI,CAAC,KAAtB,CAAlD;MAAA,MAAM,IAAI,KAAK,CAAC,SAAV,CAAoB,SAApB,EAA+B,IAA/B,EAAN;;WACA,IAAI,CAAC,GAAL,CAAS,IAAT,EAFF;GAAA,MAAA;IAIE,KAAK,CAAC,IAAN,CAAW,KAAX;IACA,OAAA,CAAQ,IAAR,EAAc,KAAd;IACA,MAAA,GAAS,KAAK,CAAC,GAAN,CAAA;IACT,KAAoD,MAAM,CAAC,SAAP,CAAiB,MAAM,CAAC,KAAxB,CAApD;MAAA,MAAM,IAAI,KAAK,CAAC,SAAV,CAAoB,SAApB,EAA+B,MAA/B,EAAN;;WACA,IAAI,CAAC,GAAL,CAAS,MAAT,EARF;;AADe;;AAWjB,SAAA,GAAY,QAAA,CAAC,KAAD,EAAQ,IAAR,EAAc,IAAd,EAAoB,KAApB,CAAA;AACZ,MAAA,KAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAAA,EAAA;EAAE,IAAG,KAAA,IAAS,CAAT,IAAc,CAAI,CAAC,IAAA,YAAgB,QAAjB,CAArB;IACE,KAAA,GAAQ,cAAA,CAAe,IAAf,EAAqB,IAArB,EAA2B,KAA3B;WACR,KAAA,CAAM,KAAN,CAAY,CAAC,IAAb,CAAkB,IAAlB,EAFF;GAAA,MAAA;IAIE,IAAA;MAAO,IAAG,IAAA,YAAgB,QAAnB;QACL,IAA8C,IAAI,CAAC,MAAL,KAAe,IAAI,CAAC,MAAlE;UAAA,MAAM,IAAI,KAAK,CAAC,wBAAV,CAAA,EAAN;;eACA,IAAI,CAAC,KAFA;OAAA,MAAA;eAIL,KAAA,CAAM,IAAI,CAAC,MAAX,CAAkB,CAAC,IAAnB,CAAwB,IAAxB,EAJK;;;IAKP,MAAA,GAAS;IACT,KAAS,4FAAT;MACE,MAAA,GAAS,MAAM,CAAC,MAAP,CAAc,SAAA,CAAU,KAAA,GAAQ,CAAlB,EAAqB,IAAI,CAAC,IAAI,CAAC,CAAD,CAA9B,EAAmC,IAAI,CAAC,CAAD,CAAvC,EAA4C,KAA5C,CAAd;IADX;WAEA,CAAC,IAAI,QAAJ,CAAa,MAAb,CAAD,EAZF;;AADU,EAlEZ;;;;;;;;;;;;;;;;;;;;;;AAqGA,OAAA,IAAO,GAAA,GAAM,QAAA,CAAC,IAAD,EAAO,KAAP,CAAA;AACb,MAAA,QAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,GAAA,EAAA;EAAE,CAAC,QAAD,EAAW,KAAX,CAAA,GAAoB,IAAI,CAAC,SAAL,CAAe,CAAf,EAAkB,CAAlB;EACpB,IAAoB,KAAA,KAAS,gBAA7B;IAAA,KAAA,GAAQ,MAAR;;EACA,MAAkB,CAAC,GAAA,KAAK,CAAC,GAAN,CAAU,QAAA,GAAW,CAArB,CAAD,CAAlB,GAAC,GAAA,WAAD,GAAU,oBAAT;EACD,MAAA,GAAS,MAAA,CAAO,KAAP,EAAc,IAAd,EAAoB,IAApB,EAA0B,KAA1B;SACT,KAAK,CAAC,IAAN,CAAW,MAAX;AALW;;AAOb,aAAA,GAAgB,QAAA,CAAC,IAAD,CAAA;AAChB,MAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA;EAAE,MAAA,GAAS;EACT,KAAA,wCAAA;;IACE,IAAG,GAAA,YAAe,QAAlB;AACE,cAAA,KAAA;AAAA,cACW,gBADX;UAEI,MAAA,GAAS,GAAG,CAAC;;AAFjB,aAGO,MAAA,KAAU,GAAG,CAAC,MAHrB;AAGO;AAHP;;UAMI,MAAM,IAAI,KAAK,CAAC,wBAAV,CAAA;AANV,OADF;;EADF;SASA;AAXc;;AAahB,MAAA,GAAS,QAAA,CAAC,KAAD,EAAQ,IAAR,EAAc,IAAd,EAAoB,KAApB,CAAA;AACT,MAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA;EAAE,GAAA,GAAM,aAAA,CAAc,IAAd;EACN,IAAG,KAAA,IAAS,CAAT,IAAc,GAAA,KAAO,MAAxB;IACE,KAAK,CAAC,IAAN,CAAW,GAAG,IAAd;IACA,OAAA,CAAQ,IAAR,EAAc,KAAd;WACA,KAAK,CAAC,GAAN,CAAA,EAHF;GAAA,MAAA;IAKE,IAAA;MAAO,IAAG,IAAA,YAAgB,QAAnB;QACL,IAA8C,IAAI,CAAC,MAAL,KAAe,GAA7D;UAAA,MAAM,IAAI,KAAK,CAAC,wBAAV,CAAA,EAAN;;eACA,IAAI,CAAC,KAFA;OAAA,MAAA;eAIL,KAAA,CAAM,GAAN,CAAU,CAAC,IAAX,CAAgB,IAAhB,EAJK;;;IAKP,MAAA,GAAS;IACT,KAAS,oFAAT;MACE,OAAA,GAAU,IAAI,CAAC,GAAL,CAAS,QAAA,CAAC,CAAD,CAAA;QAAO,IAAG,CAAA,YAAa,QAAhB;iBAA8B,CAAC,CAAC,IAAI,CAAC,CAAD,EAApC;SAAA,MAAA;iBAA6C,EAA7C;;MAAP,CAAT;MACV,MAAM,CAAC,IAAP,CAAY,MAAA,CAAO,KAAA,GAAQ,CAAf,EAAkB,OAAlB,EAA2B,IAAI,CAAC,CAAD,CAA/B,EAAoC,KAApC,CAAZ;IAFF;WAGA,IAAI,QAAJ,CAAa,MAAb,EAdF;;AAFO,EAzHT;;;AA4IA,OAAA,IAAO,IAAA,GAAO,QAAA,CAAC,IAAD,EAAO,KAAP,CAAA;AACd,MAAA,QAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,GAAA,EAAA;EAAE,CAAC,QAAD,EAAW,KAAX,CAAA,GAAoB,IAAI,CAAC,SAAL,CAAe,CAAf,EAAkB,CAAlB;EACpB,IAAoB,KAAA,KAAS,gBAA7B;IAAA,KAAA,GAAQ,MAAR;;EACA,MAAkB,CAAC,GAAA,KAAK,CAAC,GAAN,CAAU,QAAA,GAAW,CAArB,CAAD,CAAlB,GAAC,GAAA,WAAD,GAAU,oBAAT;SACD,MAAA,GAAS,OAAA,CAAQ,KAAR,EAAe,IAAf,EAAqB,IAArB,EAA2B,KAA3B;AAJG;;AAMd,OAAA,GAAU,QAAA,CAAC,KAAD,EAAQ,IAAR,EAAc,IAAd,EAAoB,KAApB,CAAA;AACV,MAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA;EAAE,GAAA,GAAM,aAAA,CAAc,IAAd;EACN,IAAG,KAAA,IAAS,CAAT,IAAc,GAAA,KAAO,MAAxB;IACE,KAAK,CAAC,IAAN,CAAW,GAAG,IAAd;WACA,OAAA,CAAQ,IAAR,EAAc,KAAd,EAFF;GAAA,MAAA;IAIE,IAAA;MAAO,IAAG,IAAA,YAAgB,QAAnB;QACL,IAA8C,IAAI,CAAC,MAAL,KAAe,GAA7D;UAAA,MAAM,IAAI,KAAK,CAAC,wBAAV,CAAA,EAAN;;eACA,IAAI,CAAC,KAFA;OAAA,MAAA;eAIL,KAAA,CAAM,GAAN,CAAU,CAAC,IAAX,CAAgB,IAAhB,EAJK;;;AAKP;IAAA,KAAS,oFAAT;MACE,OAAA,GAAU,IAAI,CAAC,GAAL,CAAS,QAAA,CAAC,CAAD,CAAA;QAAO,IAAG,CAAA,YAAa,QAAhB;iBAA8B,CAAC,CAAC,IAAI,CAAC,CAAD,EAApC;SAAA,MAAA;iBAA6C,EAA7C;;MAAP,CAAT;oBACV,OAAA,CAAQ,KAAA,GAAQ,CAAhB,EAAmB,OAAnB,EAA4B,IAAI,CAAC,CAAD,CAAhC,EAAqC,KAArC;IAFF,CAAA;oBATF;;AAFQ,EAlJV;;;;;AAoKA,OAAA,IAAO,WAAA,GAAc,QAAA,CAAC,IAAD,EAAO,KAAP,CAAA;AACrB,MAAA,GAAA,EAAA,KAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA;EAAE,CAAC,IAAD,EAAO,KAAP,CAAA,GAAgB,KAAK,CAAC,GAAN,CAAU,CAAV;EAChB,KAAA;AAAQ,YAAA,KAAA;AAAA,aACD,KAAA,YAAiB,UADhB;eAC+B,CAAC,KAAK,CAAC,KAAP;AAD/B,aAED,KAAA,YAAiB,SAFhB;eAE8B,KAAK,CAAC;AAFpC;QAGD,MAAM,IAAI,KAAK,CAAC,SAAV,CAAoB,iBAApB,EAAuC,KAAvC;AAHL;;EAIR,MAAA,GAAS;EACT,KAAA,yCAAA;;IACE,MAAA,GAAS,GAAA,CAAI,MAAJ,EAAY,GAAZ;EADX;EAEA,IAAG,cAAH;WACE,KAAK,CAAC,IAAN,CAAW,MAAX,EADF;GAAA,MAAA;WAGE,KAAK,CAAC,IAAN,CAAW,aAAa,CAAC,IAAzB,EAHF;;AATmB,EApKrB;;;;;;;AAuLA,OAAA,IAAO,MAAA,GAAS,QAAA,CAAC,IAAD,EAAO,KAAP,CAAA;AAChB,MAAA,IAAA,EAAA,GAAA,EAAA,KAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA;EAAE,CAAC,IAAD,EAAO,KAAP,CAAA,GAAgB,KAAK,CAAC,GAAN,CAAU,CAAV;EAChB,KAAA;AAAQ,YAAA,KAAA;AAAA,aACD,KAAA,YAAiB,UADhB;eAC+B,CAAC,KAAK,CAAC,KAAP;AAD/B,aAED,KAAA,YAAiB,SAFhB;eAE8B,KAAK,CAAC;AAFpC;QAGD,MAAM,IAAI,KAAK,CAAC,SAAV,CAAoB,iBAApB,EAAuC,KAAvC;AAHL;;EAIR,MAAO,CAAC,IAAA,YAAgB,SAAjB,CAAA,IAA+B,CAAC,IAAA,YAAgB,QAAjB,EAAtC;IACE,MAAM,IAAI,KAAK,CAAC,SAAV,CAAoB,iBAApB,EAAuC,IAAvC,EADR;;EAEA,OAAA,GAAU;EACV,KAAA,yCAAA;;IACE,IAAA,GAAO,GAAA,CAAI,IAAJ,EAAU,GAAV;IACP,IAAsB,YAAtB;MAAA,OAAO,CAAC,IAAR,CAAa,IAAb,EAAA;;EAFF;SAGA,KAAK,CAAC,IAAN,CAAW,OAAA,CAAQ,IAAR,EAAc,OAAd,CAAX;AAZc;;AAchB,OAAA,GAAU,QAAA,CAAC,KAAD,EAAQ,MAAR,CAAA;AACR,UAAA,KAAA;AAAA,WACO,KAAA,YAAiB,UADxB;aAEI,IAAI,SAAJ,CAAc,IAAI,GAAJ,CAAQ,MAAM,CAAC,GAAP,CAAW,QAAA,CAAC,CAAD,CAAA;eAAO,CAAC,CAAC,IAAI,CAAC,QAAP,CAAA;MAAP,CAAX,CAAR,CAAd;AAFJ,WAGO,KAAA,YAAiB,SAHxB;aAII,IAAI,QAAJ,CAAa,MAAb;AAJJ;aAMI,aAAa,CAAC,KANlB;AAAA;AADQ;;AASV,OAAA,IAAO,GAAA,GAAM,QAAA,CAAC,KAAD,EAAQ,KAAR,CAAA;AACb,MAAA;AAAE,UAAA,KAAA;AAAA,WACO,KAAA,YAAiB,UADxB;MAEI,IAA8B,KAAA,GAAQ,CAAtC;QAAA,KAAA,IAAS,KAAK,CAAC,IAAI,CAAC,OAApB;;MACA,MAAA,GAAS,KAAK,CAAC,IAAI,CAAC,MAAX,CAAkB,KAAlB;MACT,IAAG,cAAH;eACE,IAAI,SAAJ,CAAc,MAAd,EADF;OAAA,MAAA;eAGE,OAHF;;;AAJJ,WAQO,KAAA,YAAiB,SARxB;MASI,IAAyB,KAAA,GAAQ,CAAjC;QAAA,KAAA,IAAS,KAAK,CAAC,OAAf;;aACA,KAAK,CAAC,IAAI,CAAC,KAAD;AAVd;aAWO;AAXP;AADW,EA9Mb;;;;;;;;AAkOA,OAAA,IAAO,OAAA,GAAU,QAAA,CAAC,IAAD,EAAO,KAAP,CAAA;AACjB,MAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA;EAAE,CAAC,IAAD,EAAO,IAAP,CAAA,GAAkB,IAAI,CAAC,WAAL,CAAA,CAAA,GAAqB,CAAxB,GACjB,CAAI,CAAC,IAAD,EAAO,IAAP,CAAA,GAAe,KAAK,CAAC,GAAN,CAAU,CAAV,CAAnB,EACI,CAAC,IAAD,EAAO,QAAA,CAAS,KAAT,EAAgB,IAAhB,CAAP,CADJ,CADiB,GAIjB,CAAI,IAAA,GAAO,KAAK,CAAC,GAAN,CAAA,CAAX,EACI,CAAC,IAAD,EAAO,SAAP,CADJ;EAEE,MAAA,CAAO,IAAP;EACA,OAAA,GAAU;;;;;EACV,OAAO,CAAC,IAAR,CAAa,QAAA,CAAC,CAAD,EAAI,CAAJ,CAAA;IACX,IAAG,IAAA,CAAK,IAAI,CAAC,IAAI,CAAC,CAAD,CAAd,EAAmB,IAAI,CAAC,IAAI,CAAC,CAAD,CAA5B,CAAH;aACE,CAAC,EADH;KAAA,MAEK,IAAG,IAAA,CAAK,IAAI,CAAC,IAAI,CAAC,CAAD,CAAd,EAAmB,IAAI,CAAC,IAAI,CAAC,CAAD,CAA5B,CAAH;aACH,EADG;KAAA,MAAA;aAGH,EAHG;;EAHM,CAAb;SAOA,KAAK,CAAC,IAAN,CAAW,IAAI,QAAJ,CAAa,OAAb,CAAX;AAhBe,EAlOjB;;;;;AAuPA,OAAA,IAAO,KAAA,GAAQ,QAAA,CAAC,IAAD,EAAO,KAAP,CAAA;AACf,MAAA,KAAA,EAAA;EAAE,KAAA,GAAQ,IAAI,CAAC,SAAL,CAAe,CAAf;EACR,IAAoB,KAAA,KAAS,gBAA7B;IAAA,KAAA,GAAQ,MAAR;;EACA,IAAA,GAAO,KAAK,CAAC,GAAN,CAAA;EACP,MAAA,CAAO,IAAP;SACA,KAAK,CAAC,IAAN,CAAW,IAAI,QAAJ,CAAa,OAAA,CAAQ,KAAR,EAAe,IAAI,CAAC,IAApB,CAAb,CAAX;AALa;;AAOf,OAAA,IAAO,OAAA,GAAU,QAAA,CAAC,KAAD,EAAQ,IAAR,CAAA;AACjB,MAAA,IAAA,EAAA,CAAA,EAAA,IAAA,EAAA;EAAE,IAAG,KAAA,IAAS,CAAZ;WACE,KADF;GAAA,MAAA;IAGE,MAAA,GAAS;IACT,KAAA,wCAAA;;MACE,IAAG,IAAA,YAAgB,QAAnB;QACE,MAAA,GAAS,MAAM,CAAC,MAAP,CAAc,OAAA,CAAQ,KAAA,GAAM,CAAd,EAAiB,IAAI,CAAC,IAAtB,CAAd,EADX;OAAA,MAAA;QAGE,MAAM,CAAC,IAAP,CAAY,IAAZ,EAHF;;IADF;WAKA,OATF;;AADe,EA9PjB;;;;;;;;;;;;;;;;;;;;AA4RA,OAAA,IAAO,YAAA,GAAe,QAAA,CAAC,IAAD,EAAO,KAAP,CAAA;AACtB,MAAA,GAAA,EAAA,QAAA,EAAA,QAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,EAAA,IAAA,EAAA;EAAE,QAAA,GAAW,IAAI,CAAC,SAAL,CAAe,CAAf;EACX,MAAkB,KAAK,CAAC,GAAN,CAAU,QAAA,GAAW,CAArB,CAAlB,GAAC,GAAA,WAAD,GAAU,oBAAT;EACD,QAAA,GAAW;EACX,KAAA,wCAAA;;IACE,MAAA,CAAO,GAAP;IACA,QAAQ,CAAC,IAAT,CAAc,GAAG,CAAC,IAAlB;EAFF;SAGA,KAAK,CAAC,IAAN,CAAW,cAAA,CAAe,KAAf,EAAsB,IAAtB,EAA4B,QAA5B,EAAsC,CAAtC,EAAyC,EAAzC,CAAX;AAPoB;;AAStB,OAAA,IAAO,cAAA,GAAiB,QAAA,CAAC,KAAD,EAAQ,IAAR,EAAc,QAAd,EAAwB,CAAxB,EAA2B,MAA3B,CAAA;AACxB,MAAA,IAAA,EAAA,IAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAAA,EAAA;EAAE,IAAG,CAAA,IAAK,QAAQ,CAAC,MAAjB;IACE,KAAK,CAAC,IAAN,CAAW,GAAA,MAAX;IACA,OAAA,CAAQ,IAAR,EAAc,KAAd;WACA,KAAK,CAAC,GAAN,CAAA,EAHF;GAAA,MAAA;IAKE,MAAA,GAAS;AACT;IAAA,KAAA,uCAAA;;MACE,IAAA,GAAO,cAAA,CAAe,KAAf,EAAsB,IAAtB,EAA4B,QAA5B,EAAsC,CAAA,GAAI,CAA1C,EAA6C,MAAM,CAAC,MAAP,CAAc,CAAC,IAAD,CAAd,CAA7C;MACP,MAAM,CAAC,IAAP,CAAY,IAAZ;IAFF;WAGA,IAAI,QAAJ,CAAa,MAAb,EATF;;AADsB;;AAYxB,OAAA,IAAO,gBAAA,GAAmB,SAAA,CAAC,KAAD,CAAA;EACxB,OAAW,mBAAA,CAAoB,KAApB,EAA2B,CAA3B,EAA8B,EAA9B;AADa;;AAI1B,mBAAA,GAAsB,SAAA,CAAC,KAAD,EAAQ,CAAR,EAAW,MAAX,CAAA;AACtB,MAAA,IAAA,EAAA,CAAA,EAAA,IAAA,EAAA;EAAE,IAAG,CAAA,IAAK,KAAK,CAAC,MAAd;IACE,MAAM,OADR;GAAA,MAAA;AAGE;IAAA,KAAA,uCAAA;;MACE,OAAW,mBAAA,CAAoB,KAApB,EAA2B,CAAA,GAAI,CAA/B,EAAkC,MAAM,CAAC,MAAP,CAAc,CAAC,IAAD,CAAd,CAAlC;IADb,CAHF;;AADoB,EArTtB;;;;;;;AAkUA,OAAA,IAAO,MAAA,GAAS,QAAA,CAAC,IAAD,EAAO,KAAP,CAAA;AAChB,MAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,MAAA,EAAA;EAAE,CAAC,IAAD,EAAO,IAAP,CAAA,GAAkB,IAAI,CAAC,WAAL,CAAA,CAAA,GAAqB,CAAxB,GACjB,CAAI,CAAC,IAAD,EAAO,KAAP,CAAA,GAAgB,KAAK,CAAC,GAAN,CAAU,CAAV,CAApB,EACI,IAAA,GAAO,QAAA,CAAC,CAAD,CAAA;IACL,KAAK,CAAC,IAAN,CAAW,CAAX;IACA,OAAA,CAAQ,KAAR,EAAe,KAAf;WACA,QAAA,CAAS,KAAK,CAAC,GAAN,CAAA,CAAT;EAHK,CADX,EAKI,CAAC,IAAD,EAAO,IAAP,CALJ,CADiB,GAQjB,CAAI,CAAC,IAAD,EAAO,IAAP,CAAA,GAAe,KAAK,CAAC,GAAN,CAAU,CAAV,CAAnB,EACI,IAAA,GAAO,QAAA,CAAC,CAAD,CAAA;WACL,MAAA,CAAO,CAAP,EAAU,IAAV;EADK,CADX,EAGI,CAAC,IAAD,EAAO,IAAP,CAHJ;EAIE,MAAA,CAAO,IAAP;EACA,MAAA,GAAS;AACT;EAAA,KAAA,+CAAA;;IACE,IAAG,IAAA,CAAK,CAAL,CAAH;MACE,MAAM,CAAC,IAAP,CAAY,IAAI,SAAJ,CAAc,CAAd,CAAZ,EADF;;EADF;SAGA,KAAK,CAAC,IAAN,CAAW,IAAI,QAAJ,CAAa,MAAb,CAAX;AAlBc,EAlUhB;;;;;;AA0VA,OAAA,IAAO,MAAA,GAAS,QAAA,CAAC,IAAD,EAAO,KAAP,CAAA;AAChB,MAAA,IAAA,EAAA,OAAA,EAAA;EAAE,GAAA,GAAM,IAAI,CAAC,SAAL,CAAe,CAAf;EACN,IAAG,GAAA,KAAO,CAAV;;IAEE,KAAK,CAAC,GAAN,CAAA;IACA,KAAK,CAAC,IAAN,CAAW,CAAX;AACA,WAJF;;EAKA,OAAA,GAAU,IAAI,SAAJ,CAAc,IAAI,KAAJ,CAAU,GAAV,CAAd;EACV,OAAO,CAAC,SAAS,CAAC,IAAlB,CAAuB,IAAI,WAAJ,CAAmB,GAAA,KAAO,gBAAP,IAA2B,GAAA,KAAO,CAArC,GAA4C,GAA5C,GAAqD,GAAA,GAAM,CAA3E,CAAvB;EACA,KAAA,CAAM,OAAN,EAAe,KAAf;EACA,IAAA,GAAO,KAAK,CAAC,GAAN,CAAA;EACP,MAAA,CAAO,IAAP;SACA,KAAK,CAAC,IAAN,CAAW,IAAI,CAAC,MAAhB;AAZc,EA1VhB;;;;;;;AA6WA,OAAA,IAAO,OAAA,GAAU,QAAA,CAAC,IAAD,EAAO,KAAP,CAAA;AACjB,MAAA,KAAA,EAAA,IAAA,EAAA,OAAA,EAAA,MAAA,EAAA;EAAE,KAAA,GAAQ,KAAK,CAAC,GAAN,CAAA;EACR,MAAqC,KAAA,YAAiB,SAAtD;IAAA,KAAA,GAAQ,IAAI,QAAJ,CAAa,CAAC,KAAD,CAAb,EAAR;;EACA,KAAA,GAAQ,IAAI,CAAC,SAAL,CAAe,gBAAf;EACR,IAAoB,KAAA,KAAS,gBAA7B;IAAA,KAAA,GAAQ,MAAR;;EACA,OAAA,GAAU,IAAI,SAAJ,CAAc,IAAI,KAAJ,CAAU,GAAV,CAAd;EACV,OAAO,CAAC,SAAS,CAAC,IAAlB,CAAuB,IAAI,WAAJ,CAAgB,KAAhB,CAAvB;EACA,KAAA,CAAM,OAAN,EAAe,KAAf;EACA,IAAA,GAAO,KAAK,CAAC,GAAN,CAAA;EACP,MAAA,CAAO,IAAP;EACA,IAAoD,IAAI,CAAC,MAAL,KAAe,CAAnE;IAAA,MAAM,IAAI,KAAK,CAAC,SAAV,CAAoB,eAApB,EAAqC,IAArC,EAAN;;EACA,IAAA,GAAO,IAAI,CAAC;EACZ,MAAA,GAAS,SAAA,CAAU,KAAK,CAAC,IAAhB,EAAsB,CAAtB,EAAyB,IAAzB,EAA+B,CAAC,CAAD,CAA/B;SACT,KAAK,CAAC,IAAN,CAAW,MAAX;AAbe,EA7WjB;;;AA6XA,OAAA,IAAO,SAAA,GAAY,QAAA,CAAC,KAAD,EAAQ,QAAR,EAAkB,IAAlB,EAAwB,OAAxB,CAAA;AACnB,MAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA;EAAE,IAAG,QAAA,IAAY,KAAK,CAAC,MAArB;IACE,MAAA,GAAS,IAAI,CAAC,OAAO,CAAC,CAAD,CAAP,GAAa,IAAI,CAAC,MAAnB;IACb,OAAO,CAAC,CAAD,CAAP,IAAc;WACd,OAHF;GAAA,MAAA;IAKE,GAAA,GAAM,KAAK,CAAC,QAAD;IACX,MAAA,GAAS;IACT,KAAS,8CAAT;MACE,MAAM,CAAC,IAAP,CAAY,SAAA,CAAU,KAAV,EAAiB,QAAA,GAAS,CAA1B,EAA6B,IAA7B,EAAmC,OAAnC,CAAZ;IADF;WAEA,IAAI,QAAJ,CAAa,MAAb,EATF;;AADiB",
  "sourcesContent": [
    "\nimport * as Error from './error.js';\nimport { ArrayLit, FunctionLit, NumberLit, StringLit, SentinelValue, tryCall, isTruthy, SimpleCmd } from './ast.js';\nimport { NumModifier, MAX_NUM_MODIFIER } from './modifier.js';\nimport Str from './str.js'\nimport { customLT, defaultLT, equals } from './comparison.js'\nimport { isList } from './type_check.js'\nimport { Token } from './token.js'\n\n# Filter (⌿) always takes exactly two arguments off the stack. Its\n# behavior is very general. The numerical modifier determines the\n# maximum depth that we will dig into the list argument (the first\n# argument). So, for instance, if our list argument is\n#\n# { 0 { 1 } { { 2 } 3 } }\n#\n# Then a modifier of ③ will operate on 0, 1, 2, 3. A modifier of ②\n# will operate on 0, 1, {2}, 3. A modifier of ① (the default) will\n# operate on 0, {1}, {{2} 3}. A modifier of ⓪ will operate on the list\n# as a whole. Note that a modifier of ⑳ is treated as infinity and\n# will nest arbitrarily deep.\n#\n# For each position in the original list at index (i1, i2, ..., in),\n# we get the corresponding entry from the function argument. If the\n# function argument is not nested as deeply, then we simply access as\n# many indices as possible until we reach a non-list. The result shall\n# be either a number or a function. If it's a function, it's called\n# with the value as an argument and should return a number. The\n# absolute value of the number, in either case, determines the number\n# of times to repeat the argument.\n#\n# Examples: (Assume f, g, h are function literals)\n#\n# { 0 1 2 } f ⌿ will call f for each of 0, 1, 2\n#\n# { 0 1 { 2 } } f ⌿ will call f for each of 0, 1, {2}\n#\n# { 0 1 { 2 } } f② ⌿ will call f for each of 0, 1, 2\n#\n# { 0 1 { 2 } } { f g h } ⌿ will call f on 0, g on 1, h on {2}\n#\n# { 0 1 { 2 } } { f g h } ⌿② will call f on 0, g on 1, h on 2\n#\n# { 0 {1 2} } { f g } ⌿② will call f on 0, g on 1, g on 2\n#\n# { 0 {1 2} } { f {g h} } ⌿② will call f on 0, g on 1, h on 2\n#\n# In any example above, we can replace a function with a number, and\n# it will be treated as a constant function which returns that number.\nexport filter = (term, state) ->\n  depth = term.getNumMod(1)\n  depth = Infinity if depth == MAX_NUM_MODIFIER\n  [list, func] = state.pop(2)\n  result = runFilter(depth, list, func, state)\n  state.push(result...)\n\nfilterTestFunc = (value, func, state) ->\n  if func instanceof NumberLit\n    throw new Error.TypeError(\"integer\", func) unless Number.isInteger(func.value)\n    Math.abs(func)\n  else\n    state.push(value)\n    tryCall(func, state)\n    result = state.pop()\n    throw new Error.TypeError(\"integer\", result) unless Number.isInteger(result.value)\n    Math.abs(result)\n\nrunFilter = (depth, list, func, state) ->\n  if depth <= 0 or not (list instanceof ArrayLit)\n    count = filterTestFunc(list, func, state)\n    Array(count).fill(list)\n  else\n    mask = if func instanceof ArrayLit\n      throw new Error.IncompatibleArrayLengths() if func.length != list.length\n      func.data\n    else\n      Array(list.length).fill(func)\n    result = []\n    for i in [0..mask.length-1]\n      result = result.concat(runFilter(depth - 1, list.data[i], mask[i], state))\n    [new ArrayLit(result)]\n\n# Map (¨). Takes two arguments: a list and a function. The first\n# numerical argument controls the number of lists to pop (Map will\n# always pop one more total argument than its first numerical\n# argument, as it also pops the function). The second numerical\n# argument determines the depth in the same way as filter's depth\n# argument. Both numerical arguments default to 1. The function can be\n# a function or an arbitrary nested list of functions.\n#\n# Examples:\n#\n# {1 {1} {{1}}} [1≡] ¨①⓪ evaluates to 0\n#\n# {1 {1} {{1}}} [1≡] ¨①① evaluates to {-1 0 0}\n#\n# {1 {1} {{1}}} [1≡] ¨①② evaluates to {-1 {-1} {0}}\n#\n# {1 {1} {{1}}} [1≡] ¨①③ evaluates to {-1 {-1} {{-1}}}\n#\n# Note that ¨①⓪ is just $ and ¨⓪① will simply pop the function and\n# call it once with no arguments.\nexport map = (term, state) ->\n  [argCount, depth] = term.getNumMod(1, 1)\n  depth = Infinity if depth == MAX_NUM_MODIFIER\n  [args..., func] = [state.pop(argCount + 1)...]\n  result = runMap(depth, args, func, state)\n  state.push(result)\n\ngetNodeLength = (args) ->\n  length = undefined\n  for arg in args\n    if arg instanceof ArrayLit\n      switch\n        when not length?\n          length = arg.length\n        when length == arg.length\n          # Pass\n        else\n          throw new Error.IncompatibleArrayLengths()\n  length\n\nrunMap = (depth, args, func, state) ->\n  len = getNodeLength(args)\n  if depth <= 0 or len == undefined\n    state.push(...args)\n    tryCall(func, state)\n    state.pop()\n  else\n    mask = if func instanceof ArrayLit\n      throw new Error.IncompatibleArrayLengths() if func.length != len\n      func.data\n    else\n      Array(len).fill(func)\n    result = []\n    for i in [0..len-1]\n      newArgs = args.map((v) -> if v instanceof ArrayLit then v.data[i] else v)\n      result.push runMap(depth - 1, newArgs, mask[i], state)\n    new ArrayLit(result)\n\n# Just like map but doesn't expect a result of any kind.\nexport each = (term, state) ->\n  [argCount, depth] = term.getNumMod(1, 1)\n  depth = Infinity if depth == MAX_NUM_MODIFIER\n  [args..., func] = [state.pop(argCount + 1)...]\n  result = runEach(depth, args, func, state)\n\nrunEach = (depth, args, func, state) ->\n  len = getNodeLength(args)\n  if depth <= 0 or len == undefined\n    state.push(...args)\n    tryCall(func, state)\n  else\n    mask = if func instanceof ArrayLit\n      throw new Error.IncompatibleArrayLengths() if func.length != len\n      func.data\n    else\n      Array(len).fill(func)\n    for i in [0..len-1]\n      newArgs = args.map((v) -> if v instanceof ArrayLit then v.data[i] else v)\n      runEach(depth - 1, newArgs, mask[i], state)\n\n# Nested query (n) Takes two arguments: a list/string and an index,\n# which can be either a number or a list. The index is traversed in\n# order, taking the nth element of the list/string at each step.\nexport nestedQuery = (term, state) ->\n  [list, index] = state.pop(2)\n  index = switch\n    when index instanceof NumberLit then [index.value]\n    when index instanceof ArrayLit then index.data\n    else throw new Error.TypeError(\"number or array\", index)\n  result = list\n  for idx in index\n    result = nth(result, idx)\n  if result?\n    state.push(result)\n  else\n    state.push(SentinelValue.null)\n\n# Select (⊇) takes two arguments: a list/string and an index. The\n# index can either be a number or a list. If it's a number, it's\n# treated a a singleton list. A new list/string is formed by taking\n# the elements at the given positions. Any invalid indices are\n# ignored.\nexport select = (term, state) ->\n  [list, index] = state.pop(2)\n  index = switch\n    when index instanceof NumberLit then [index.value]\n    when index instanceof ArrayLit then index.data\n    else throw new Error.TypeError(\"number or array\", index)\n  unless (list instanceof StringLit) or (list instanceof ArrayLit)\n    throw new Error.TypeError(\"array or string\", list)\n  results = []\n  for idx in index\n    curr = nth(list, idx)\n    results.push(curr) if curr?\n  state.push rebuild(list, results)\n\nrebuild = (model, values) ->\n  switch\n    when model instanceof StringLit\n      new StringLit(new Str(values.map((x) -> x.text.toString())))\n    when model instanceof ArrayLit\n      new ArrayLit(values)\n    else\n      SentinelValue.null # Meh.\n\nexport nth = (value, index) ->\n  switch\n    when value instanceof StringLit\n      index += value.text.length if index < 0\n      result = value.text.charAt(index)\n      if result?\n        new StringLit(result)\n      else\n        undefined\n    when value instanceof ArrayLit\n      index += value.length if index < 0\n      value.data[index]\n    else value\n\n# (⍋) By default, gradeUp takes one argument: a list. It returns a\n# list of indices which indicates the permutation placing the list\n# into ascending order. With a prime modifier, this will pop a\n# function (before popping the list) that will be used as the \"less\n# than\" operator for comparison. Returns a list of indices which\n# indicate the permutation of the list after sorting.\nexport gradeUp = (term, state) ->\n  [list, func] = if term.getPrimeMod() > 0\n    [list, func] = state.pop(2)\n    [list, customLT(state, func)]\n  else\n    list = state.pop()\n    [list, defaultLT]\n  isList(list)\n  indices = [0..list.length-1]\n  indices.sort (a, b) ->\n    if func(list.data[a], list.data[b])\n      -1\n    else if func(list.data[b], list.data[a])\n      1\n    else\n      0\n  state.push(new ArrayLit(indices))\n\n# (⍪) Flattens nested lists. Numerical argument (default=1) determines\n# how many layers to flatten. Numerical argument of 20 is treated as\n# infinity. Numerical argument of 0 results in no change to the list.\nexport ravel = (term, state) ->\n  depth = term.getNumMod(1)\n  depth = Infinity if depth == MAX_NUM_MODIFIER\n  list = state.pop()\n  isList(list)\n  state.push new ArrayLit(doRavel(depth, list.data))\n\nexport doRavel = (depth, list) ->\n  if depth <= 0\n    list\n  else\n    result = []\n    for elem in list\n      if elem instanceof ArrayLit\n        result = result.concat(doRavel(depth-1, elem.data))\n      else\n        result.push(elem)\n    result\n\n# Outer product (⊗) takes one numerical argument N, which defaults to\n# 1. It pops N+1 values, where the top value should be a function and\n# the rest should be lists. The function will be called with one\n# argument from each list, for every possible combination of such\n# arguments.\n#\n# Examples:\n#\n# {\"a\" \"b\"} {\"A\" \"B\"} `⋄ ⊗ equals {{\"aA\" \"aB\"} {\"bA\" \"bB\"}}\n#\n# {\"a\" \"b\"} {\"A\" \"B\"} `⋄ ⊗② equals {{\"aA\" \"aB\"} {\"bA\" \"bB\"}}\n#\n# Note that ⊗① simply maps over a list, and ⊗⓪ simply calls the\n# function once.\n#\n# If you wish to get a flat result structure (rather than the nested\n# one that ⊗ produces, you should call Flatten (⍪) on the result, with\n# a numerical argument one smaller than the one passed to ⊗.\nexport outerProduct = (term, state) ->\n  argCount = term.getNumMod(2)\n  [args..., func] = state.pop(argCount + 1)\n  arglists = []\n  for arg in args\n    isList(arg)\n    arglists.push arg.data\n  state.push doOuterProduct(state, func, arglists, 0, [])\n\nexport doOuterProduct = (state, func, arglists, n, prefix) ->\n  if n >= arglists.length\n    state.push(prefix...)\n    tryCall(func, state)\n    state.pop()\n  else\n    result = []\n    for elem in arglists[n]\n      curr = doOuterProduct(state, func, arglists, n + 1, prefix.concat([elem]))\n      result.push(curr)\n    new ArrayLit(result)\n\nexport cartesianProduct = (lists) ->\n  yield from cartesianProductRec lists, 0, []\n  return\n\ncartesianProductRec = (lists, n, prefix) ->\n  if n >= lists.length\n    yield prefix\n  else\n    for elem in lists[n]\n      yield from cartesianProductRec lists, n + 1, prefix.concat([elem])\n  return\n\n# ∈ (Member). By default, it takes two arguments: the first is a list\n# and the second is an element to search for. Returns all of the\n# indices at which the element can be found in the list. If used with\n# a prime modifier, the search element is instead a unary function,\n# which is called for each position.\nexport member = (term, state) ->\n  [list, func] = if term.getPrimeMod() > 0\n    [list, func0] = state.pop(2)\n    func = (x) ->\n      state.push(x)\n      tryCall(func0, state)\n      isTruthy state.pop()\n    [list, func]\n  else\n    [list, elem] = state.pop(2)\n    func = (x) ->\n      equals(x, elem)\n    [list, func]\n  isList(list)\n  result = []\n  for v, i in list.data\n    if func(v)\n      result.push(new NumberLit(i))\n  state.push new ArrayLit(result)\n\n# Length (#). By default, returns the length of the list. With a\n# numerical modifier, this will happily nested deeper and count the\n# length of sublists as well. Numerical argument of 20 is treated as\n# infinity.\nexport length = (term, state) ->\n  num = term.getNumMod(1)\n  if num == 0\n    # There's one thing, if we ignore all depth. Simple and dumb result.\n    state.pop()\n    state.push(1)\n    return\n  newTerm = new SimpleCmd(new Token('⍪'))\n  newTerm.modifiers.push(new NumModifier(if num == MAX_NUM_MODIFIER or num == 0 then num else num - 1))\n  ravel(newTerm, state)\n  list = state.pop()\n  isList(list)\n  state.push(list.length)\n\n# Reshape (⍴) takes two arguments: a list and a shape. Its numerical\n# argument defaults to 20 (which equates to infinity). The first thing\n# it does is ravel the list to the depth of its own numerical\n# argument. Then it produces a new list of the specified shape, where\n# the shape should either be a number or a list of numbers.\nexport reshape = (term, state) ->\n  shape = state.pop()\n  shape = new ArrayLit([shape]) unless shape instanceof ArrayLit\n  depth = term.getNumMod(MAX_NUM_MODIFIER)\n  depth = Infinity if depth == MAX_NUM_MODIFIER\n  newTerm = new SimpleCmd(new Token('⍪'))\n  newTerm.modifiers.push(new NumModifier(depth))\n  ravel(newTerm, state)\n  list = state.pop()\n  isList(list)\n  throw new Error.TypeError(\"nonempty list\", list) if list.length == 0\n  list = list.data\n  result = doReshape(shape.data, 0, list, [0])\n  state.push result\n\n# listPos is a 1-element array (cheap and nasty ref cell)\nexport doReshape = (shape, shapePos, list, listPos) ->\n  if shapePos >= shape.length\n    result = list[listPos[0] % list.length]\n    listPos[0] += 1\n    result\n  else\n    dim = shape[shapePos]\n    result = []\n    for i in [0..dim-1] by 1\n      result.push doReshape(shape, shapePos+1, list, listPos)\n    new ArrayLit(result)\n"
  ]
}