{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": ";AACA,IAAA,UAAA,EAAA;;AAAA,OAAA;EAAS,QAAT;EAAmB,KAAnB;CAAA,MAAA;;AACA,OAAA;EAAS,SAAT;CAAA,MAAA;;AACA,OAAA;EAAS,KAAT;CAAA,MAAA;;AACA,OAAA;EAAS,WAAT;CAAA,MAAA;;AACA,OAAA;EAAS,YAAT;CAAA,MAAA;;AACA,OAAO,GAAP,MAAA;;AAEA,UAAA,GAAa;;AAEb,YAAA,GAAe;;AAEf,OAAA,IAAa,uBAAN,MAAA,qBAAA,QAAmC,UAAnC;EAEL,WAAa,CAAA,CAAA;SACX,CAAA;IACA,IAAC,CAAA,KAAD,GAAS,GAAG,CAAC,UAAJ,CAAe,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAgC,CAAC,KAAhD;IACT,IAAC,CAAA,QAAD,GAAY;EAHD;;EAKb,KAAO,CAAC,KAAD,CAAA;WACL,QAAQ,CAAC,aAAT,CAAuB,SAAvB,CAAiC,CAAC,SAAlC,IAA+C,KAAK,CAAC,QAAN,CAAA,CAAA,GAAmB;EAD7D;;EAGP,SAAW,CAAA,CAAA;AACb,QAAA;IAAI,IAAG,IAAC,CAAA,QAAD,IAAa,IAAC,CAAA,KAAK,CAAC,MAAvB;aACE,OADF;KAAA,MAAA;MAGE,MAAA,GAAS,IAAC,CAAA,KAAK,CAAC,MAAP,CAAc,IAAC,CAAA,QAAf;MACT,IAAC,CAAA,QAAD,IAAa;aACb,OALF;;EADS;;EAQX,SAAW,CAAA,CAAA;IACT,IAAG,IAAC,CAAA,QAAD,IAAa,IAAC,CAAA,KAAK,CAAC,MAAvB;aACE,OADF;KAAA,MAAA;aAGE,IAAC,CAAA,KAAK,CAAC,MAAP,CAAc,IAAC,CAAA,QAAf,EAHF;;EADS;;AAlBN;;AAwBP,OAAA,IAAO,GAAA,GAAM,QAAA,CAAA,CAAA;AACb,MAAA,CAAA,EAAA,SAAA,EAAA,MAAA,EAAA,IAAA,EAAA;EAAE,IAAA,GAAO,QAAQ,CAAC,aAAT,CAAuB,OAAvB,CAA+B,CAAC;EACvC,SAAA,GAAY,IAAI,oBAAJ,CAAA;AACZ;IACE,QAAQ,CAAC,aAAT,CAAuB,SAAvB,CAAiC,CAAC,SAAlC,GAA8C;IAC9C,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAgC,CAAC,SAAjC,GAA6C;IAC7C,MAAA,GAAS,QAAA,CAAS,IAAT;IACT,MAAA,GAAS,KAAA,CAAM,MAAN;IACT,SAAS,CAAC,QAAV,CAAmB,IAAI,WAAJ,CAAgB,MAAhB,CAAnB;IACA,SAAS,CAAC,IAAV,CAAe,MAAf;IACA,SAAS,CAAC,OAAV,CAAA,EAPF;GAQA,aAAA;IAAM;IACJ,IAAG,CAAA,YAAa,KAAb,IAAuB,CAAI,UAA9B;MACE,QAAQ,CAAC,aAAT,CAAuB,SAAvB,CAAiC,CAAC,SAAlC,IAA+C,MAAA,GAAS,CAAC,CAAC,QAAF,CAAA,CAAT,GAAwB,KADzE;KAAA,MAAA;MAGE,MAAM,EAHR;KADF;;SAKA,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAgC,CAAC,SAAjC,GAA6C,SAAS,CAAC,aAAV,CAAA;AAhBlC;;AAkBb,OAAA,IAAO,YAAA,GAAe,QAAA,CAAA,CAAA;EACpB,YAAA,GAAe,IAAI,YAAJ,CAAA;SACf,YAAY,CAAC,QAAb,CAAsB,QAAQ,CAAC,aAAT,CAAuB,OAAvB,CAAtB;AAFoB",
  "sourcesContent": [
    "\nimport { tokenize, parse } from './parser.js'\nimport { Evaluator } from './eval.js'\nimport { Error } from './error.js'\nimport { FunctionLit } from './ast.js'\nimport { InputManager } from './unicode_input.js'\nimport Str from './str.js'\n\nDEBUG_MODE = false\n\ninputManager = null\n\nexport class InteractiveEvaluator extends Evaluator\n\n  constructor: () ->\n    super()\n    @input = Str.fromString(document.querySelector(\"#input\").value)\n    @inputPos = 0\n\n  print: (value) ->\n    document.querySelector(\"#output\").innerText += value.toString() + \"\\n\"\n\n  readInput: () ->\n    if @inputPos >= @input.length\n      undefined\n    else\n      result = @input.charAt @inputPos\n      @inputPos += 1\n      result\n\n  peekInput: () ->\n    if @inputPos >= @input.length\n      undefined\n    else\n      @input.charAt @inputPos\n\nexport run = ->\n  text = document.querySelector(\"#code\").value\n  evaluator = new InteractiveEvaluator()\n  try\n    document.querySelector(\"#output\").innerText = \"\"\n    document.querySelector(\"#stack\").innerText = \"\"\n    tokens = tokenize text\n    parsed = parse tokens\n    evaluator.pushCall new FunctionLit(parsed)\n    evaluator.eval parsed\n    evaluator.popCall()\n  catch e\n    if e instanceof Error and not DEBUG_MODE\n      document.querySelector(\"#output\").innerText += \"\\n\\n\" + e.toString() + \"\\n\"\n    else\n      throw e\n  document.querySelector(\"#stack\").innerText = evaluator.stackToString()\n\nexport initInputMgr = ->\n  inputManager = new InputManager()\n  inputManager.register(document.querySelector(\"#code\"))\n\n"
  ]
}