{
  "version": 3,
  "file": "eval.js",
  "sourceRoot": "..",
  "sources": [
    "src/eval.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport * as AST from './ast.js'\nimport * as Error from './error.js'\nimport Str from './str.js'\n\nexport class Evaluator\n\n  constructor: () ->\n    @stack = []\n    @callStack = []\n    @globalVars = {}\n\n  eval: (arg) ->\n    if Array.isArray(arg)\n      this.eval(elem) for elem from arg\n    else if arg instanceof AST.AST\n      arg.eval this\n    else\n      # TODO Throw some kind of (non-caught) error here\n\n  push: (vs...) ->\n    for v in vs\n      # Wrap any primitives\n      v = switch\n        when typeof(v) == 'number'\n          new AST.NumberLit(v)\n        when typeof(v) == 'string' or v instanceof Str\n          new AST.StringLit(v)\n        else\n          v\n      @stack.push v\n\n  pop: (n) ->\n    if n?\n      arr = (this.pop() for i in [0..n-1] by 1)\n      arr.reverse()\n      arr\n    else\n      if @stack.length <= 0\n        throw new Error.StackUnderflowError()\n      else\n        @stack.pop()\n\n  peek: (n) ->\n    if n?\n      if @stack.length < n\n        throw new Error.StackUnderflowError()\n      else\n        @stack.slice(- n)\n    else\n      if @stack.length <= 0\n        throw new Error.StackUnderflowError()\n      else\n        @stack[@stack.length - 1]\n\n  pushCall: (v) ->\n    @callStack.push(v)\n\n  popCall: () ->\n    @callStack.pop()\n\n  # n=0 gets the current stack frame. Higher arguments get deeper in\n  # the call stack.\n  getFromCallStack: (n) ->\n    if n >= @callStack.length\n      throw new Error.CallStackUnderflowError()\n    else\n      @callStack[@callStack.length - (n + 1)]\n\n  print: (value) ->\n    # Default behavior is to simply print to console. Interactive\n    # editor will override this.\n    console.log value.toString()\n\n  readInput: () ->\n    # Read one character from input. Returns undefined if input is\n    # empty.\n    undefined\n\n  peekInput: () ->\n    # Read one character from input but don't consume.\n    undefined\n\n  getGlobal: (k) ->\n    @globalVars[k] ? new AST.SentinelValue(\"Îµ\")\n\n  setGlobal: (k, v) ->\n    @globalVars[k] = v\n\n  stackToString: () ->\n    @stack.join \" \"\n"
  ]
}