{
  "version": 3,
  "file": "ast.js",
  "sourceRoot": "..",
  "sources": [
    "src/ast.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nimport * as Error from './error.js'\nimport { stringify } from './pretty.js'\nimport * as Modifier from './modifier.js'\nimport * as TypeCheck from './type_check.js'\nimport * as Op from './op.js'\nimport * as ListOp from './list_op.js'\nimport * as StackOp from './stack_op.js'\nimport { arrayEq, gcd, lcm } from './util.js'\nimport { Token, TokenType, escapeString } from './token.js'\nimport Str from './str.js'\nimport { equals, compare, Ordering, defaultLT, customLT } from './comparison.js'\nimport * as SuperSub from './super_sub.js'\n\nexport class AST\n\n  constructor: () ->\n    @modifiers = []\n\n  call: (state) ->\n    throw new Error.CallNonFunction(this)\n\n  getNumMod: (args...) ->\n    args = [undefined] if args.length == 0\n    result = []\n    for mod from @modifiers\n      if mod instanceof Modifier.NumModifier\n        result.push(mod.value)\n        break if result.length >= args.length\n    while result.length < args.length\n      result.push args[result.length]\n    if result.length == 1\n      result[0]\n    else\n      result\n\n  getPrimeMod: () ->\n    n = 0\n    for mod from @modifiers\n      if mod instanceof Modifier.PrimeModifier\n        n += 1\n    n\n\nexport class SimpleCmd extends AST\n\n  constructor: (@token) -> super()\n\n  isNumberLit: () ->\n    @token.tokenType() == TokenType.Number\n\n  isStringLit: () ->\n    @token.tokenType() == TokenType.String\n\n  eval: (state) ->\n    if this.isNumberLit()\n      state.push new NumberLit(@token.text)\n    else if this.isStringLit()\n      state.push new StringLit(@token.text)\n    else\n      switch @token.text.toString()\n        ### IO ###\n        when '.' # Pretty print ( x -- )\n          state.print stringify(state.pop());\n        when ',' # Read integer from input\n          state.push readAndParseInt(state)\n        when '📜' # Read character from input\n          char = state.readInput()\n          if char?\n            state.push(new StringLit(char))\n          else\n            state.push(SentinelValue.null)\n        when '📖' # Read line from input\n          result = \"\"\n          loop\n            curr = state.readInput()\n            break if curr == undefined\n            result += curr\n            break if curr == '\\n'\n          if result != \"\"\n            state.push(new StringLit(result))\n          else\n            state.push(SentinelValue.null)\n        when \"📚\" # Read all remaining from input\n          result = \"\"\n          loop\n            curr = state.readInput()\n            break if curr == undefined\n            result += curr\n          if result != \"\"\n            state.push(new StringLit(result))\n          else\n            state.push(SentinelValue.null)\n        when '😱' # Panic and throw error ( err -- )\n          throw new Error.UserError(state.pop())\n        ### STACK SHUFFLING ###\n        when ':' # Duplicate ( x -- x x )\n                 # (Numerical modifier determines number of things to duplicate)\n          mod = this.getNumMod(1)\n          x = state.pop(mod)\n          state.push(x...)\n          state.push(x...)\n        when '%' # Pop ( x -- )\n                 # (Numerical modifier determines amount to pop)\n          mod = this.getNumMod(1)\n          state.pop(mod)\n        when '@' # Swap/Rotate ( x y -- y x )\n                 # (Numerical modifier determines how deep to lift)\n          mod = this.getNumMod(1)\n          store = state.pop(mod)\n          lift = state.pop()\n          state.push(store...)\n          state.push(lift)\n        when 'ø' # Over ( x y -- x y x )\n                 # (Numerical modifier determines how deep to go)\n          mod = this.getNumMod(1)\n          store = state.pop(mod)\n          lift = state.peek()\n          state.push(store...)\n          state.push(lift)\n        ### ARITHMETIC ###\n        when '+' # Add ( x y -- z )\n                 # (Numerical modifier determines arity)\n          Op.op state, this,\n            function: (a, b) -> new NumberLit(a.value + b.value)\n            preProcess: TypeCheck.isNumber\n            zero: 0\n            extension: Op.binary\n            scalarExtend: true\n        when '-' # Subtract ( x y -- z )\n          Op.op state, this,\n            function: (a, b) -> new NumberLit(a.value - b.value)\n            preProcess: TypeCheck.isNumber\n            one: (a) -> new NumberLit(- a.value)\n            extension: Op.binary\n            scalarExtend: true\n        when '×' # Multiply ( x y -- z )\n          Op.op state, this,\n            function: (a, b) -> new NumberLit(a.value * b.value)\n            preProcess: TypeCheck.isNumber\n            zero: 1\n            extension: Op.binary\n            scalarExtend: true\n        when '÷' # Divide ( x y -- z )\n          Op.op state, this,\n            function: (a, b) -> new NumberLit(a.value / b.value)\n            preProcess: TypeCheck.isNumber\n            one: (a) -> new NumberLit(1 / a.value)\n            extension: Op.binary\n            scalarExtend: true\n        when '*' # Power ( x y -- z )\n          Op.op state, this,\n            function: (a, b) -> new NumberLit(a.value ** b.value)\n            preProcess: TypeCheck.isNumber\n            zero: 1\n            extension: Op.binaryRight\n            scalarExtend: true\n        when 'ê' # e^x ( x -- y )\n          state.push Op.scalarExtendUnary((x) -> Math.exp TypeCheck.isNumber(x).value)(state.pop())\n        when '🌳' # ln(x) ( x -- y )\n          # With prime modifier, it's log_b(a) ( a b -- y )\n          if this.getPrimeMod() > 0\n            Op.op state, this,\n              function: (a, b) -> new NumberLit(Math.log(a.value) / Math.log(b.value))\n              preProcess: TypeCheck.isNumber\n              extension: Op.binary\n              scalarExtend: true\n          else\n            state.push Op.scalarExtendUnary((x) -> Math.log TypeCheck.isNumber(x).value)(state.pop())\n        when '√' # sqrt(x) ( x -- y )\n          # With prime modifier, it's (a ** (1/b)) ( a b -- y )\n          if this.getPrimeMod() > 0\n            Op.op state, this,\n              function: (a, b) -> new NumberLit(a.value ** (1 / b.value))\n              preProcess: TypeCheck.isNumber\n              extension: Op.binary\n              scalarExtend: true\n          else\n            state.push Op.scalarExtendUnary((x) -> Math.sqrt TypeCheck.isNumber(x).value)(state.pop())\n        when '|' # Remainder ( x y -- z )\n          # This does not extend with modifier; it only scalar extends\n          Op.op state, this,\n            function: (a, b) -> new NumberLit((a.value % b.value + b.value) % b.value) # \"True\" mod\n            preProcess: TypeCheck.isNumber\n            scalarExtend: true\n        when '⩑'\n          Op.op state, this,\n            function: (a, b) -> new NumberLit(lcm(a.value, b.value))\n            preProcess: TypeCheck.isNumber\n            zero: 1\n            extension: Op.binary\n            scalarExtend: true\n        when '⩒' # GCD ( x y -- z )\n          Op.op state, this,\n            function: (a, b) -> new NumberLit(gcd(a.value, b.value))\n            preProcess: TypeCheck.isNumber\n            zero: 0\n            extension: Op.binary\n            scalarExtend: true\n        when '_' # Negate ( x -- y )\n          state.push Op.scalarExtendUnary((x) -> - TypeCheck.isNumber(x).value)(state.pop())\n        when '⅟' # Reciprocal ( x -- y )\n          state.push Op.scalarExtendUnary((x) -> 1 / TypeCheck.isNumber(x).value)(state.pop())\n        when '⌉' # Ceiling ( x -- y )\n          state.push Op.scalarExtendUnary((x) -> Math.ceil TypeCheck.isNumber(x).value)(state.pop())\n        when '⌋' # Floor ( x -- y )\n          state.push Op.scalarExtendUnary((x) -> Math.floor TypeCheck.isNumber(x).value)(state.pop())\n        when 'A' # Absolute value ( x -- y )\n          state.push Op.scalarExtendUnary((x) -> Math.abs TypeCheck.isNumber(x).value)(state.pop())\n        when 'a' # Signum ( x -- y )\n          state.push Op.scalarExtendUnary((x) -> Math.sign TypeCheck.isNumber(x).value)(state.pop())\n        when '∧' # Bitwise Conjunction ( x y -- z )\n          Op.op state, this,\n            function: (a, b) -> a.value & b.value\n            preProcess: TypeCheck.isNumber\n            zero: -1\n            extension: Op.binary\n            scalarExtend: true\n        when '∨' # Bitwise Disjunction ( x y -- z )\n          Op.op state, this,\n            function: (a, b) -> a.value | b.value\n            preProcess: TypeCheck.isNumber\n            zero: 0\n            extension: Op.binary\n            scalarExtend: true\n        when '⊕' # Bitwise Exclusive Or ( x y -- z )\n          Op.op state, this,\n            function: (a, b) -> a.value ^ b.value\n            preProcess: TypeCheck.isNumber\n            zero: 0\n            extension: Op.binary\n            scalarExtend: true\n        when '¬' # Bitwise Negate ( x -- y )\n          state.push Op.scalarExtendUnary((x) -> ~ TypeCheck.isNumber(x).value)(state.pop())\n        when '¿' # Defined-or ( x y -- z )\n          # Returns the first argument unless it's ε, in which\n          # case it returns the second.\n          Op.op state, this,\n            function: (a, b) -> if equals(a, SentinelValue.null) then b else a\n            zero: SentinelValue.null\n            extension: Op.binary\n            scalarExtend: false\n        ### TRIGONOMETRY ###\n        when '◐'\n          state.push Op.scalarExtendUnary((x) -> Math.sin TypeCheck.isNumber(x).value)(state.pop())\n        when '◑'\n          state.push Op.scalarExtendUnary((x) -> Math.asin TypeCheck.isNumber(x).value)(state.pop())\n        when '◒'\n          state.push Op.scalarExtendUnary((x) -> Math.cos TypeCheck.isNumber(x).value)(state.pop())\n        when '◓'\n          state.push Op.scalarExtendUnary((x) -> Math.acos TypeCheck.isNumber(x).value)(state.pop())\n        when '◔'\n          state.push Op.scalarExtendUnary((x) -> Math.tan TypeCheck.isNumber(x).value)(state.pop())\n        when '◕'\n          state.push Op.scalarExtendUnary((x) -> Math.atan TypeCheck.isNumber(x).value)(state.pop())\n        when '◖'\n          state.push Op.scalarExtendUnary((x) -> Math.sinh TypeCheck.isNumber(x).value)(state.pop())\n        when '◗'\n          state.push Op.scalarExtendUnary((x) -> Math.asinh TypeCheck.isNumber(x).value)(state.pop())\n        when '◌'\n          state.push Op.scalarExtendUnary((x) -> Math.cosh TypeCheck.isNumber(x).value)(state.pop())\n        when '◍'\n          state.push Op.scalarExtendUnary((x) -> Math.acosh TypeCheck.isNumber(x).value)(state.pop())\n        when '◎'\n          state.push Op.scalarExtendUnary((x) -> Math.tanh TypeCheck.isNumber(x).value)(state.pop())\n        when '◉'\n          state.push Op.scalarExtendUnary((x) -> Math.atanh TypeCheck.isNumber(x).value)(state.pop())\n        ### NUMERICAL CONSTANTS ###\n        when 'π'\n          state.push Math.PI\n        when 'τ'\n          state.push 2 * Math.PI\n        when 'e'\n          state.push Math.E\n        when '¼'\n          state.push 1 / 4\n        when '½'\n          state.push 1 / 2\n        when '¾'\n          state.push 3 / 4\n        when '⅐'\n          state.push 1 / 7\n        when '⅑'\n          state.push 1 / 9\n        when '⅒'\n          state.push 1 / 10\n        when '⅓'\n          state.push 1 / 3\n        when '⅔'\n          state.push 2 / 3\n        when '⅕'\n          state.push 1 / 5\n        when '⅖'\n          state.push 2 / 5\n        when '⅗'\n          state.push 3 / 5\n        when '⅘'\n          state.push 4 / 5\n        when '⅙'\n          state.push 1 / 6\n        when '⅚'\n          state.push 5 / 6\n        when '⅛'\n          state.push 1 / 8\n        when '⅜'\n          state.push 3 / 8\n        when '⅝'\n          state.push 5 / 8\n        when '⅞'\n          state.push 7 / 8\n        when '↉'\n          state.push 0 / 3\n        ### STRING OPERATIONS ###\n        when '⋄' # Concatenate ( x y -- z )\n                 # (Numerical modifier determines arity)\n          # No scalar extension. Works on lists and on strings.\n          Op.op state, this,\n            function: catenate\n            preProcess: TypeCheck.isStringOrList\n            zero: new StringLit(\"\")\n            extension: Op.binary\n            scalarExtend: false\n        when '💬' # Chr / Ord ( x -- y )\n          arg = state.pop()\n          arg = new ArrayLit([arg]) if typeof(arg) == 'number'\n          switch\n            when arg instanceof ArrayLit\n              res = new Str(String.fromCodePoint(c.value) for c in arg.data)\n              state.push new StringLit(res)\n            when arg instanceof StringLit\n              res = (new NumberLit(arg.text.codePointAt(i)) for i in [0..arg.text.length-1])\n              state.push new ArrayLit(res)\n            else\n              throw new Error.TypeError(\"string or list\", arg)\n        when '🍴' # Chomp ( x -- y )\n          # Removes the last character if it's a newline. Subject to scalar extension.\n          chomp = (x) ->\n            x = x.text\n            result = if x.charAt(x.length - 1) == '\\n'\n              Str.fromString(x.toString().slice(0, x.length - 1))\n            else\n              x\n            new StringLit(result)\n          state.push Op.scalarExtendUnary((x) -> chomp(TypeCheck.isString(x)))(state.pop())\n        when 'r' # Mark as regexp ( s -- s )\n          s = state.pop()\n          TypeCheck.isString(s)\n          state.push new StringLit(s.text).markAsRegexp()\n        when '¶' # Split string ( s delim -- arr )\n          # Delimiter can be either string or regexp\n          [s, delim] = state.pop(2)\n          TypeCheck.isString(delim)\n          delim = delim.toReOrStr()\n          if delim == \"\"\n            # Awkward hack for UTF-16 support (we don't want to pass\n            # empty string to split function)\n            delim = new RegExp(\"\", \"u\")\n          TypeCheck.isString(s)\n          result = s.text.toString().split(delim).map((x) -> new StringLit(Str.fromString(x)))\n          state.push new ArrayLit(result)\n        when '⁋' # Join string ( arr delim -- s )\n          # Delimiter should be a string. Other argument should be list of strings.\n          [arr, delim] = state.pop(2)\n          TypeCheck.isList(arr)\n          delim = stringify(delim)\n          result = new StringLit(arr.data.map(stringify).join(delim))\n          state.push(result)\n        when 'p' # Prettify ( x -- s )\n          # Converts the value to a string. No-op if given a string.\n          x = state.pop()\n          state.push new StringLit(stringify x)\n        ### COMPARISONS ###\n        when '=' # Equal ( x y -- ? )\n          Op.op state, this,\n            function: (a, b) -> equals(a, b)\n            postProcess: Op.boolToInt\n            zero: -1\n            extension: Op.merge (a, b) -> a & b\n            scalarExtend: true\n            whiteFlag: Op.WhiteFlag.ignore\n        when '<' # LT ( x y -- ? )\n          Op.op state, this,\n            function: (a, b) -> compare(a, b) == Ordering.LT\n            postProcess: Op.boolToInt\n            zero: -1\n            extension: Op.merge (a, b) -> a & b\n            scalarExtend: true\n            whiteFlag: Op.WhiteFlag.ignore\n        when '>' # GT ( x y -- ? )\n          Op.op state, this,\n            function: (a, b) -> compare(a, b) == Ordering.GT\n            postProcess: Op.boolToInt\n            zero: -1\n            extension: Op.merge (a, b) -> a & b\n            scalarExtend: true\n            whiteFlag: Op.WhiteFlag.ignore\n        when '≤' # LE ( x y -- ? )\n          Op.op state, this,\n            function: (a, b) -> compare(a, b) != Ordering.GT\n            postProcess: Op.boolToInt\n            zero: -1\n            extension: Op.merge (a, b) -> a & b\n            scalarExtend: true\n            whiteFlag: Op.WhiteFlag.ignore\n        when '≥' # GE ( x y -- ? )\n          Op.op state, this,\n            function: (a, b) -> compare(a, b) != Ordering.LT\n            postProcess: Op.boolToInt\n            zero: -1\n            extension: Op.merge (a, b) -> a & b\n            scalarExtend: true\n            whiteFlag: Op.WhiteFlag.ignore\n        when '≠' # Not Equal ( x y -- ? )\n          Op.op state, this,\n            function: (a, b) -> not equals(a, b)\n            postProcess: Op.boolToInt\n            zero: -1\n            extension: Op.merge (a, b) -> a & b\n            scalarExtend: true\n            whiteFlag: Op.WhiteFlag.ignore\n        when '≡' # Same ( x y -- ? )\n          # Note: No scalar extension\n          Op.op state, this,\n            function: (a, b) -> equals(a, b)\n            postProcess: Op.boolToInt\n            zero: -1\n            extension: Op.merge (a, b) -> a & b\n            scalarExtend: false\n            whiteFlag: Op.WhiteFlag.ignore\n        when '≢' # Not Same ( x y -- ? )\n          # Note: No scalar extension\n          Op.op state, this,\n            function: (a, b) -> not equals(a, b)\n            postProcess: Op.boolToInt\n            zero: -1\n            extension: Op.merge (a, b) -> a & b\n            scalarExtend: false\n            whiteFlag: Op.WhiteFlag.ignore\n        when '⌈' # Max\n          # With prime, pops a function and uses it instead of\n          # default less-than.\n          func = if this.getPrimeMod() > 0\n            customLT(state, state.pop())\n          else\n            defaultLT\n          Op.op state, this,\n            function: (a, b) -> if func(b, a) then a else b\n            zero: -Infinity\n            extension: Op.binary\n            scalarExtend: true\n        when '⌊' # Min\n          # With prime, pops a function and uses it instead of\n          # default less-than.\n          func = if this.getPrimeMod() > 0\n            customLT(state, state.pop())\n          else\n            defaultLT\n          Op.op state, this,\n            function: (a, b) -> if func(a, b) then a else b\n            zero: Infinity\n            extension: Op.binary\n            scalarExtend: true\n        ### METAPROGRAMMING ###\n        when 's' # Get stack frame\n                 # (Numerical argument determines how deep to go; n=0 is current)\n          mod = this.getNumMod(0)\n          frame = state.getFromCallStack(mod)\n          state.push(frame)\n        when '{', '⚐', 'ε' # Sentinel value\n          state.push(new SentinelValue(@token.text))\n        when '⚑' # Construct ⚐ sentinel ( fn deffn -- fn )\n          # Constructs a handler for the ⚐ sentinel. The resulting\n          # function will call deffn if the top value of the stack is\n          # ⚐ (popping ⚐), or will call fn otherwise (without popping\n          # anything off the stack a priori). This is useful for\n          # providing a \"default\" value to fold (/) in the case of an\n          # empty list.\n          #\n          # For instance, [`+ `999 ⚑ /] is a function which sums a\n          # list, but returns 999 rather than 0 if the list is empty.\n          [fn, deffn] = state.pop(2)\n          state.push(\n            new FunctionLit([\n              new SimpleCmd(new Token(\":\")),\n              new SimpleCmd(new Token(\"⚐\")),\n              new SimpleCmd(new Token(\"≡\")),\n              new FunctionLit([\n                new SimpleCmd(new Token('%')),\n                deffn,\n                new SimpleCmd(new Token('$')),\n              ]),\n              fn,\n              new SimpleCmd(new Token(\"i\")),\n            ])\n          )\n        ### ARRAY LITERALS ###\n        when '}' # End array (pops until sentinel value is hit)\n          arr = []\n          value = state.pop()\n          until equals(value, SentinelValue.arrayStart)\n            arr.push(value)\n            value = state.pop()\n          state.push(new ArrayLit(arr.reverse()))\n        ### LIST OPERATIONS ###\n        when '/' # Fold ( ..a list ( ..a x y -- ..b z ) -- ..b t )\n          # This one bears a bit of explanation. If the list is\n          # nonempty, it acts like a traditional fold, applying the\n          # binary operation between all elements of the list,\n          # associating to the left. If the list is empty, it pushes\n          # the special sentinel value ⚐ to the stack then calls the\n          # function once. Built-in functions like + and × know to\n          # check for the ⚐ and will return their identity (0 and 1,\n          # resp.) in that case. If you provide your own function, you\n          # can deal with the empty case by checking for ⚐.\n          [list, func] = state.pop(2)\n          TypeCheck.isList(list)\n          if list.length <= 0\n            state.push(SentinelValue.whiteFlag)\n            tryCall(func, state)\n          else\n            acc = list.data[0]\n            state.push(acc)\n            for i in [1..list.length-1] by 1\n              state.push(list.data[i])\n              tryCall(func, state)\n        when '\\\\' # Scan ( ..a list ( ..a x y -- ..b z ) -- ..b t )\n          # This works just like fold (/) except that it returns a\n          # list of all the intermediate results. The ⚐ caveat does\n          # not apply, for if the empty list is given as input, then\n          # the empty list is produced as output.\n          [list, func] = state.pop(2)\n          TypeCheck.isList(list)\n          if list.length <= 0\n            state.push(new ArrayLit([]))\n          else\n            acc = list.data[0]\n            state.push(acc)\n            result = []\n            for i in [1..list.length-1] by 1\n              result.push state.peek()\n              state.push list.data[i]\n              tryCall(func, state)\n            result.push state.pop()\n            state.push new ArrayLit(result)\n        when '⌿' # Filter ( ..a list ( ..a x -- ..a ? ) -- ..a list )\n          # The filter \"function\" can either be a function or a list\n          # with the same length as the list, which acts as a mask. In\n          # either case, the absolute value of the result at each\n          # position is used to determine the number of times to\n          # repeat the value. Numerical argument (default=1)\n          # determines how many nested lists to go. See documentation\n          # for ListOp.filter for more specific details.\n          ListOp.filter this, state\n        when '¨' # Map ( ..a list ( ..a x -- ..a y ) -- ..a list )\n          # Nests arbitrarily deep with a numerical argument, like\n          # filter. See ListOp.map for full details.\n          ListOp.map this, state\n        when 'ė' # Each ( ..a list ( ..a x -- ..a ) -- ..a )\n          # Nests arbitrarily deep with a numerical argument, like\n          # filter. See ListOp.each for full details.\n          ListOp.each this, state\n        when 'n' # Nested Query ( list index -- result )\n          # Works on lists or strings. See ListOp.nestedQuery\n          # for details.\n          ListOp.nestedQuery this, state\n        when '⊇' # Select ( list index -- result )\n          # Works on lists or strings. See ListOp.select\n          # for details.\n          ListOp.select this, state\n        when '⍋' # Grade Up\n          # Sorting function. See ListOp.gradeUp for full details.\n          ListOp.gradeUp this, state\n        when '⍪' # Ravel / Flatten\n          # Flattens lists. See ListOp.ravel for full details.\n          ListOp.ravel this, state\n        when '⊗' # Outer Product\n          # Outer product of lists under some operation. See ListOp.outerProduct.\n          ListOp.outerProduct this, state\n        when '∷' # Prepend / Append\n          if this.getPrimeMod() == 0\n            # With no prime, prepends some number of elements to a list\n            Op.op state, this,\n              function: (x, list) -> new ArrayLit([x].concat(TypeCheck.isList(list).data))\n              extension: Op.binaryRight\n              scalarExtend: false\n              defaultModifier: 1\n              modifierAdjustment: (x) -> x + 1\n          else\n            # With prime, appends some number of elements to a list\n            Op.op state, this,\n              function: (x, list) -> new ArrayLit(TypeCheck.isList(list).data.concat([x]))\n              extension: Op.binaryRight\n              scalarExtend: false\n              defaultModifier: 1\n              modifierAdjustment: (x) -> x + 1\n        when '⁰', '¹', '²', '³', '⁴', '⁵', '⁶', '⁷', '⁸', '⁹'\n          state.push(ListOp.nth(state.pop(), SuperSub.toNumber(@token.text)) ? SentinelValue.null)\n        when '₁', '₂', '₃', '₄', '₅', '₆', '₇', '₈', '₉'\n          state.push(ListOp.nth(state.pop(), -SuperSub.toNumber(@token.text)) ? SentinelValue.null)\n        when '∈' # Member ( list x -- idx )\n          # List membership. See ListOp.member for details\n          ListOp.member this, state\n        when '#' # Length ( list -- n )\n          # List length. See ListOp.length for details\n          ListOp.length this, state\n        when '🗋' # Empty ( list -- ? )\n          # With prime modifier, flattens before checking\n          if this.getPrimeMod() > 0\n            newTerm = new SimpleCmd(new Token('⍪'))\n            newTerm.modifiers.push(new Modifier.NumModifier(Modifier.MAX_NUM_MODIFIER))\n            ListOp.ravel(newTerm, state)\n          list = state.pop()\n          TypeCheck.isList(list)\n          state.push Op.boolToInt(list.length == 0)\n        when 'ℓ' # List constructor\n          # Takes as many arguments as numerical modifier (default=1) specifies\n          num = this.getNumMod(1)\n          arr = new ArrayLit(state.pop(num))\n          state.push arr\n        when '◁' # Take (left) ( list n -- list )\n          [list, n] = state.pop(2)\n          TypeCheck.isList(list)\n          TypeCheck.isNumber(n)\n          n = Math.abs(n.value)\n          state.push new ArrayLit(list.data.slice(0, n))\n        when '▷' # Take (right) ( list n -- list )\n          [list, n] = state.pop(2)\n          TypeCheck.isList(list)\n          TypeCheck.isNumber(n)\n          n = Math.abs(n.value)\n          state.push new ArrayLit(list.data.slice(- n))\n        when '⧏' # Drop (left) ( list n -- list )\n          [list, n] = state.pop(2)\n          TypeCheck.isList(list)\n          TypeCheck.isNumber(n)\n          n = Math.abs(n.value)\n          state.push new ArrayLit(list.data.slice(n))\n        when '⧐' # Drop (right) ( list n -- list )\n          [list, n] = state.pop(2)\n          TypeCheck.isList(list)\n          TypeCheck.isNumber(n)\n          n = Math.abs(n.value)\n          state.push new ArrayLit(list.data.slice(0, - n))\n        when '◂' # Take while (left) ( list f -- list )\n          [list, f] = state.pop(2)\n          TypeCheck.isList(list)\n          result = []\n          for elem in list.data\n            state.push(elem)\n            tryCall(f, state)\n            curr = isTruthy state.pop()\n            break unless curr\n            result.push elem\n          state.push new ArrayLit(result)\n        when '▸' # Take while (right) ( list f -- list )\n          [list, f] = state.pop(2)\n          TypeCheck.isList(list)\n          result = []\n          for elem in list.data.slice().reverse()\n            state.push(elem)\n            tryCall(f, state)\n            curr = isTruthy state.pop()\n            break unless curr\n            result.push elem\n          state.push new ArrayLit(result.reverse())\n        when '◄' # Drop while (left) ( list f -- list )\n          [list, f] = state.pop(2)\n          TypeCheck.isList(list)\n          for elem, i in list.data\n            state.push(elem)\n            tryCall(f, state)\n            curr = isTruthy state.pop()\n            break unless curr\n          state.push new ArrayLit(list.data.slice(i))\n        when '►' # Drop while (right) ( list f -- list )\n          [list, f] = state.pop(2)\n          TypeCheck.isList(list)\n          for elem, i in list.data.slice().reverse()\n            state.push(elem)\n            tryCall(f, state)\n            curr = isTruthy state.pop()\n            break unless curr\n          state.push new ArrayLit(list.data.slice(0, list.length - i))\n        when 'ɹ' # Reverse ( list -- list )\n          list = state.pop()\n          TypeCheck.isStringOrList(list)\n          if list instanceof ArrayLit\n            state.push new ArrayLit(list.data.slice().reverse())\n          else\n            state.push new StringLit(new Str(list.text.data.slice().reverse()))\n        when '⍴' # Reshape ( list shape -- list )\n          # See ListOp.reshape\n          ListOp.reshape this, state\n        ### CONTROL FLOW ###\n        when 'i' # If ( ..a ? ( ..a -- ..b ) ( ..a -- ..b ) -- ..b )\n          [c, t, f] = state.pop(3)\n          if isTruthy(c)\n            tryCall(t, state)\n          else\n            tryCall(f, state)\n        when 'w' # While ( ..a ( ..a -- ..b ? ) ( ..b -- ..a ) -- ..b )\n          [cond, body] = state.pop(2)\n          loop\n            tryCall(cond, state)\n            result = state.pop()\n            break unless isTruthy(result)\n            tryCall(body, state)\n        when 'W' # While ( ..a ( ..a -- ..a ? ) -- ..b )\n          # Like w but with no explicit body.\n          cond = state.pop()\n          loop\n            tryCall(cond, state)\n            result = state.pop()\n            break unless isTruthy(result)\n        when '⍳' # Repeat N times ( ..a n ( ..a i -- ..a ) -- ..a )\n          [n, body] = state.pop(2)\n          for i in [0..n-1] by 1\n            state.push(i)\n            tryCall(body, state)\n        when '⍸' # Repeat N times and accumulate ( ..a x n ( ..a x i -- ..a x ) -- ..a list )\n          [n, body] = state.pop(2)\n          result = [state.peek()]\n          for i in [0..n-1] by 1\n            state.push(i)\n            tryCall(body, state)\n            result.push(state.peek())\n          state.pop()\n          state.push new ArrayLit(result)\n        when '$' # Call ( ..a ( ..a -- ..b ) -- ..b )\n          fn = state.pop()\n          tryCall(fn, state)\n        ### HIGHER ORDER FUNCTIONS ###\n        when 'ī' # Push identity function\n          state.push(new FunctionLit([]))\n        when 'c' # Make constant function ( x -- ( -- x ) )\n          # Numerical argument (defaults to zero) determines number to\n          # pop in resulting function.\n          num = this.getNumMod(0)\n          x = state.pop()\n          dropCmd = new SimpleCmd(new Token(\"%\"))\n          dropCmd.modifiers.push(new Modifier.NumModifier(num))\n          dropper = new FunctionLit([dropCmd])\n          state.push(new ComposedFunction(dropper, new CurriedFunction(x, new FunctionLit([]))))\n        when '●' # Curry ( x ( ..a x -- ..b ) -- ( ..a -- ..b ) )\n          Op.op state, this,\n            function: (x, f) -> new CurriedFunction(x, f)\n            extension: Op.binaryRight\n            scalarExtend: false\n            defaultModifier: 1\n            modifierAdjustment: (x) -> x + 1\n        when '○' # Compose ( ( ..a -- ..b ) ( ..b -- ..c ) -- ( ..a -- ..c ) )\n          Op.op state, this,\n            function: (f, g) -> new ComposedFunction(f, g)\n            extension: Op.binaryRight\n            scalarExtend: false\n            zero: () -> new FunctionLit([])\n            defaultModifier: 2\n        ### BOXING / UNBOXING ###\n        when '⊂' # Box ( x -- box )\n          value = state.pop()\n          state.push new Box(value)\n        when '⊃' # Unbox ( box -- x )\n          # No effect if value is not boxed\n          value = state.pop()\n          state.push(if value instanceof Box then value.value else value)\n        ### STACK COMBINATORS ###\n        when 'D' # Dip ( ..a x ( ..a -- ..b ) -- ..b x )\n                 # (Numerical modifier determines arity)\n          mod = this.getNumMod(1)\n          fn = state.pop()\n          preserve = state.pop(mod)\n          tryCall(fn, state)\n          state.push(preserve...)\n        when 'K' # Keep ( ..a x ( ..a x -- ..b ) -- ..b x )\n                 # (Numerical modifier determines arity)\n          mod = this.getNumMod(1)\n          fn = state.pop()\n          preserve = state.peek(mod)\n          tryCall(fn, state)\n          state.push(preserve...)\n        when '⇉' # \"Spread\" combinator, in Factor parlance\n          # See StackOp.spread for details.\n          StackOp.spread this, state\n        when '⤨' # \"Cross\" combinator\n          # See StackOp.cross for details\n          StackOp.cross this, state\n        when '↘' # \"Apply\" combinator\n          # See StackOp.cleave for details\n          StackOp.apply this, state\n        when '↗' # \"Cleave\" combinator\n          # See StackOp.apply for details\n          StackOp.cleave this, state\n        else\n          throw new Error.UnknownCommandError(@token)\n\n  toString: () ->\n    @token.toString() + @modifiers.join(\"\")\n\nexport class AssignToVar extends AST\n\n  constructor: (@target) -> super()\n\n  eval: (state) ->\n    state.setGlobal @target, state.pop()\n\n  toString: () ->\n    \"→\" + @target\n\nexport class ReadFromVar extends AST\n\n  constructor: (@target) -> super()\n\n  eval: (state) ->\n    state.push state.getGlobal(@target)\n\n  toString: () ->\n    \"←\" + @target\n\nexport class StringLit extends AST\n\n  constructor: (@text) ->\n    super()\n    @text = Str.fromString(@text) if typeof(@text) == 'string'\n    @regexp = false\n\n  markAsRegexp: () ->\n    @regexp = true\n    this\n\n  isRegexp: () ->\n    @regexp\n\n  eval: (state) -> state.push(this)\n\n  toReOrStr: () ->\n    if this.isRegexp()\n      new RegExp(this.text.toString(), \"u\")\n    else\n      this.text.toString()\n\n  toString: () ->\n    escapeString(@text) + if this.isRegexp() then \"r\" else \"\"\n\nexport class NumberLit extends AST\n\n  constructor: (@value) -> super()\n\n  eval: (state) -> state.push(this)\n\n  toString: () ->\n    if @value == Infinity\n      \"∞\"\n    else if @value == -Infinity\n      \"-∞\"\n    else if @value != @value # NaN >.<\n      \"👿\"\n    else\n      @value.toString()\n\nexport class FunctionLit extends AST\n\n  constructor: (@body) -> super()\n\n  eval: (state) -> state.push(this)\n\n  call: (state) ->\n    state.eval(@body)\n\n  toString: () ->\n    \"[ #{@body.join(\" \")} ]#{@modifiers.join(\"\")}\"\n\nexport class CurriedFunction extends AST\n\n  constructor: (@arg, @function) -> super()\n\n  eval: (state) -> state.push(this)\n\n  call: (state) ->\n    state.push(@arg)\n    tryCall(@function, state)\n\n  toString: () ->\n    # toString \"lies\" a bit, in that it prints as a FunctionLit\n    # quotation. If you try to read this representation back in, you\n    # will get a FunctionLit, not a CurriedFunction. But it's accurate\n    # enough for most purposes.\n    \"[ #{@arg} #{@function} $ ]#{@modifiers.join(\"\")}\"\n\nexport class ComposedFunction extends AST\n\n  constructor: (@first, @second) -> super()\n\n  eval: (state) -> state.push(this)\n\n  call: (state) ->\n    tryCall(@first, state)\n    tryCall(@second, state)\n\n  toString: () ->\n    # toString \"lies\" a bit, in that it prints as a FunctionLit\n    # quotation. If you try to read this representation back in, you\n    # will get a FunctionLit, not a CurriedFunction. But it's accurate\n    # enough for most purposes.\n    \"[ #{@first} $ #{@second} $ ]#{@modifiers.join(\"\")}\"\n\n# Types\n# \"{\" - Array start\n# \"⚐\" - Empty fold argument\n# \"ε\" - Null value\nexport class SentinelValue extends AST\n\n  constructor: (@type) ->\n    super()\n    @type = Str.fromString(@type) if typeof(@type) == 'string'\n\n  toString: () ->\n    @type + @modifiers.join(\"\")\n\n  @null: new SentinelValue(\"ε\")\n  @whiteFlag: new SentinelValue(\"⚐\")\n  @arrayStart: new SentinelValue(\"{\")\n\nexport class Box extends AST\n\n  constructor: (@value) -> super()\n\n  toString: () ->\n    \"#{@value} ⊂#{@modifiers.join(\"\")}\"\n\nexport class ArrayLit extends AST\n\n  constructor: (@data) -> super()\n\n  @filled: (n, x) ->\n    new ArrayLit(Array(n).fill(x))\n\n  toString: () ->\n    \"{ #{@data.join(\" \")} }#{@modifiers.join(\"\")}\"\n\nObject.defineProperty ArrayLit.prototype, 'length',\n  get: -> @data.length\n\nexport tryCall = (fn, state) ->\n  if fn instanceof AST\n    state.pushCall(fn)\n    result = fn.call(state)\n    state.popCall(fn)\n    result\n  else\n    throw new Error.CallNonFunction(fn)\n\nreadAndParseInt = (state) ->\n  # Skip to the next number\n  while state.peekInput()? and /[^-+0-9]/.test(state.peekInput())\n    state.readInput()\n  # Start reading\n  valid = false\n  sign = (x) -> x\n  if state.peekInput()? and /[-+]/.test(state.peekInput())\n    ch = state.readInput()\n    sign = ((x) -> - x) if ch == '-'\n    valid = true\n  v = 0\n  next = state.peekInput()\n  while next? and /[0-9]/.test(next)\n    valid = true\n    state.readInput()\n    v = v * 10 + parseInt(next, 10)\n    next = state.peekInput()\n  return SentinelValue.null if state.peekInput() == undefined and valid == false\n  throw new Error.InvalidInput() unless valid\n  new NumberLit(sign(v))\n\nexport isTruthy = (c) ->\n  !(c instanceof NumberLit) or (c.value != 0)\n\nexport catenate = (a, b) ->\n  if a instanceof ArrayLit and b instanceof ArrayLit\n    new ArrayLit(a.data.concat(b.data))\n  else if a instanceof StringLit and b instanceof StringLit\n    new StringLit(a.text.concat(b.text))\n  else\n    throw new Error.TypeError(\"arrays or strings\", new ArrayLit([a, b]))\n"
  ]
}